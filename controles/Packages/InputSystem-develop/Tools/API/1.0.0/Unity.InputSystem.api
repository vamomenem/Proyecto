// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.XR.GoogleVr
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Daydream Controller")] [UnityEngine.Scripting.Preserve] public class DaydreamController : UnityEngine.InputSystem.XR.XRController
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl app { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl home { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl recentered { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl recentering { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl volumeDown { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl volumeUp { get; }
        public DaydreamController() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Daydream Headset")] [UnityEngine.Scripting.Preserve] public class DaydreamHMD : UnityEngine.InputSystem.XR.XRHMD
    {
        public DaydreamHMD() {}
    }
}

namespace Unity.XR.Oculus.Input
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"GearVR Controller")] [UnityEngine.Scripting.Preserve] public class GearVRTrackedController : UnityEngine.InputSystem.XR.XRController
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl back { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public GearVRTrackedController() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Oculus Headset")] [UnityEngine.Scripting.Preserve] public class OculusHMD : UnityEngine.InputSystem.XR.XRHMD
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Button", name = @"isTracked")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Integer", name = @"trackingState")] [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl userPresence { get; }
        public OculusHMD() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Oculus Headset (w/ on-headset controls)")] [UnityEngine.Scripting.Preserve] public class OculusHMDExtended : Unity.XR.Oculus.Input.OculusHMD
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl back { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        public OculusHMDExtended() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Oculus Remote")] [UnityEngine.Scripting.Preserve] public class OculusRemote : UnityEngine.InputSystem.InputDevice
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl back { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl start { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        public OculusRemote() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Oculus Touch Controller")] [UnityEngine.Scripting.Preserve] public class OculusTouchController : UnityEngine.InputSystem.XR.XRControllerWithRumble
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularAcceleration { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primaryButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primaryTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl secondaryButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl secondaryTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl start { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control thumbstick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl thumbstickClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Button", name = @"isTracked")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Integer", name = @"trackingState")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Quaternion", name = @"deviceRotation")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Vector3", name = @"devicePosition")] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl thumbstickTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl triggerTouched { get; }
        public OculusTouchController() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.Scripting.Preserve] public class OculusTrackingReference : UnityEngine.InputSystem.TrackedDevice
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl isTracked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.IntegerControl trackingState { get; }
        public OculusTrackingReference() {}
        protected virtual void FinishSetup();
    }
}

namespace Unity.XR.OpenVR
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Handed Vive Tracker")] [UnityEngine.Scripting.Preserve] public class HandedViveTracker : Unity.XR.OpenVR.ViveTracker
    {
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primary { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl trackpadPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public HandedViveTracker() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Windows MR Controller (OpenVR)")] [UnityEngine.Scripting.Preserve] public class OpenVRControllerWMR : UnityEngine.InputSystem.XR.XRController
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control joystick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl menu { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadClick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadTouch { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public OpenVRControllerWMR() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"OpenVR Headset")] [UnityEngine.Scripting.Preserve] public class OpenVRHMD : UnityEngine.InputSystem.XR.XRHMD
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyeVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyeVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyeVelocity { get; }
        public OpenVRHMD() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Oculus Touch Controller (OpenVR)")] [UnityEngine.Scripting.Preserve] public class OpenVROculusTouchController : UnityEngine.InputSystem.XR.XRControllerWithRumble
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primaryButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl secondaryButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control thumbstick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl thumbstickClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl thumbstickTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public OpenVROculusTouchController() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Vive Lighthouse")] [UnityEngine.Scripting.Preserve] public class ViveLighthouse : UnityEngine.InputSystem.TrackedDevice
    {
        public ViveLighthouse() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Vive Tracker")] [UnityEngine.Scripting.Preserve] public class ViveTracker : UnityEngine.InputSystem.TrackedDevice
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        public ViveTracker() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Vive Wand")] [UnityEngine.Scripting.Preserve] public class ViveWand : UnityEngine.InputSystem.XR.XRControllerWithRumble
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl primary { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control trackpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl trackpadPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl trackpadTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public ViveWand() {}
        protected virtual void FinishSetup();
    }
}

namespace UnityEngine.InputSystem
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(stateType = typeof(UnityEngine.InputSystem.LowLevel.AccelerometerState))] [UnityEngine.Scripting.Preserve] public class Accelerometer : UnityEngine.InputSystem.Sensor
    {
        public UnityEngine.InputSystem.Controls.Vector3Control acceleration { get; }
        public static UnityEngine.InputSystem.Accelerometer current { get; }
        public Accelerometer() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Ambient Temperature")] [UnityEngine.Scripting.Preserve] public class AmbientTemperatureSensor : UnityEngine.InputSystem.Sensor
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Ambient Temperature", noisy = true)] public UnityEngine.InputSystem.Controls.AxisControl ambientTemperature { get; }
        public static UnityEngine.InputSystem.AmbientTemperatureSensor current { get; }
        public AmbientTemperatureSensor() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Attitude", stateType = typeof(UnityEngine.InputSystem.LowLevel.AttitudeState))] [UnityEngine.Scripting.Preserve] public class AttitudeSensor : UnityEngine.InputSystem.Sensor
    {
        public UnityEngine.InputSystem.Controls.QuaternionControl attitude { get; }
        public static UnityEngine.InputSystem.AttitudeSensor current { get; }
        public AttitudeSensor() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    public static class CommonUsages
    {
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Back;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString BatteryStrength;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Cancel;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Forward;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Hatswitch;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString HighFreqMotor;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Horizontal;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString LeftHand;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString LowFreqMotor;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Menu;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Modifier;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Orientation;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Point;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Position;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Pressure;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Primary2DMotion;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString PrimaryAction;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString PrimaryTrigger;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString RightHand;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString ScrollHorizontal;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString ScrollVertical;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Secondary2DMotion;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString SecondaryAction;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString SecondaryTrigger;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Submit;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Twist;
        public static readonly UnityEngine.InputSystem.Utilities.InternedString Vertical;
    }

    [System.Reflection.DefaultMember(@"Item")] [UnityEngine.InputSystem.Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(UnityEngine.InputSystem.LowLevel.GamepadState))] [UnityEngine.Scripting.Preserve] public class Gamepad : UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.Haptics.IDualMotorRumble, UnityEngine.InputSystem.Haptics.IHaptics
    {
        public UnityEngine.InputSystem.Controls.ButtonControl aButton { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Gamepad> all { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl bButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl buttonEast { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl buttonNorth { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl buttonSouth { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl buttonWest { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl circleButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl crossButton { get; }
        public static UnityEngine.InputSystem.Gamepad current { get; }
        public UnityEngine.InputSystem.Controls.DpadControl dpad { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl this[UnityEngine.InputSystem.LowLevel.GamepadButton button] { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl leftShoulder { get; }
        public UnityEngine.InputSystem.Controls.StickControl leftStick { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl leftStickButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl leftTrigger { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl rightShoulder { get; }
        public UnityEngine.InputSystem.Controls.StickControl rightStick { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl rightStickButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl rightTrigger { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl selectButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl squareButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl startButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl triangleButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl xButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl yButton { get; }
        public Gamepad() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnAdded();
        protected virtual void OnRemoved();
        public virtual void PauseHaptics();
        public virtual void ResetHaptics();
        public virtual void ResumeHaptics();
        public virtual void SetMotorSpeeds(float lowFrequency, float highFrequency);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Gravity", stateType = typeof(UnityEngine.InputSystem.LowLevel.GravityState))] [UnityEngine.Scripting.Preserve] public class GravitySensor : UnityEngine.InputSystem.Sensor
    {
        public static UnityEngine.InputSystem.GravitySensor current { get; }
        public UnityEngine.InputSystem.Controls.Vector3Control gravity { get; }
        public GravitySensor() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(stateType = typeof(UnityEngine.InputSystem.LowLevel.GyroscopeState))] [UnityEngine.Scripting.Preserve] public class Gyroscope : UnityEngine.InputSystem.Sensor
    {
        public UnityEngine.InputSystem.Controls.Vector3Control angularVelocity { get; }
        public static UnityEngine.InputSystem.Gyroscope current { get; }
        public Gyroscope() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Humidity")] [UnityEngine.Scripting.Preserve] public class HumiditySensor : UnityEngine.InputSystem.Sensor
    {
        public static UnityEngine.InputSystem.HumiditySensor current { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Relative Humidity", noisy = true)] public UnityEngine.InputSystem.Controls.AxisControl relativeHumidity { get; }
        public HumiditySensor() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    public interface IInputActionCollection : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputAction>, System.Collections.IEnumerable
    {
        public abstract System.Nullable<UnityEngine.InputSystem.InputBinding> bindingMask { get; set; }
        public abstract UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputControlScheme> controlSchemes { get; }
        public abstract System.Nullable<UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputDevice>> devices { get; set; }
        public abstract bool Contains(UnityEngine.InputSystem.InputAction action);
        public abstract void Disable();
        public abstract void Enable();
    }

    [UnityEngine.Scripting.Preserve] public interface IInputInteraction
    {
        public abstract void Process(ref UnityEngine.InputSystem.InputInteractionContext context);
        public abstract void Reset();
    }

    [UnityEngine.Scripting.Preserve] public interface IInputInteraction<TValue> : UnityEngine.InputSystem.IInputInteraction where TValue : System.ValueType, new()
    {
    }

    public sealed class InputAction : System.ICloneable, System.IDisposable
    {
        public event System.Action<UnityEngine.InputSystem.InputAction.CallbackContext> canceled;
        public event System.Action<UnityEngine.InputSystem.InputAction.CallbackContext> performed;
        public event System.Action<UnityEngine.InputSystem.InputAction.CallbackContext> started;
        public UnityEngine.InputSystem.InputActionMap actionMap { get; }
        public UnityEngine.InputSystem.InputControl activeControl { get; }
        public System.Nullable<UnityEngine.InputSystem.InputBinding> bindingMask { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputBinding> bindings { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputControl> controls { get; }
        public bool enabled { get; }
        public string expectedControlType { get; set; }
        public System.Guid id { get; }
        public string interactions { get; }
        public string name { get; }
        public UnityEngine.InputSystem.InputActionPhase phase { get; }
        public string processors { get; }
        public bool triggered { get; }
        public UnityEngine.InputSystem.InputActionType type { get; }
        public InputAction() {}
        public InputAction(string name = default(string), UnityEngine.InputSystem.InputActionType type = 0, string binding = default(string), string interactions = default(string), string processors = default(string), string expectedControlType = default(string)) {}
        public UnityEngine.InputSystem.InputAction Clone();
        public void Disable();
        public virtual void Dispose();
        public void Enable();
        public TValue ReadValue<TValue>() where TValue : System.ValueType, new();
        public object ReadValueAsObject();
        public virtual string ToString();
        public struct CallbackContext
        {
            public UnityEngine.InputSystem.InputAction action { get; }
            public bool canceled { get; }
            public UnityEngine.InputSystem.InputControl control { get; }
            public double duration { get; }
            public UnityEngine.InputSystem.IInputInteraction interaction { get; }
            public bool performed { get; }
            public UnityEngine.InputSystem.InputActionPhase phase { get; }
            public bool started { get; }
            public double startTime { get; }
            public double time { get; }
            public int valueSizeInBytes { get; }
            public System.Type valueType { get; }
            public TValue ReadValue<TValue>() where TValue : System.ValueType, new();
            public void ReadValue(void* buffer, int bufferSize);
            public bool ReadValueAsButton();
            public object ReadValueAsObject();
            public virtual string ToString();
        }
    }

    [System.Reflection.DefaultMember(@"Item")] public class InputActionAsset : UnityEngine.ScriptableObject, System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputAction>, System.Collections.IEnumerable, UnityEngine.InputSystem.IInputActionCollection
    {
        public const string Extension = inputactions;
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputActionMap> actionMaps { get; }
        public virtual System.Nullable<UnityEngine.InputSystem.InputBinding> bindingMask { get; set; }
        public virtual UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputControlScheme> controlSchemes { get; }
        public virtual System.Nullable<UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputDevice>> devices { get; set; }
        public bool enabled { get; }
        public UnityEngine.InputSystem.InputAction this[string actionNameOrId] { get; }
        public InputActionAsset() {}
        public virtual bool Contains(UnityEngine.InputSystem.InputAction action);
        public virtual void Disable();
        public virtual void Enable();
        public UnityEngine.InputSystem.InputAction FindAction(System.Guid guid);
        public UnityEngine.InputSystem.InputAction FindAction(string actionNameOrId, bool throwIfNotFound = False);
        public UnityEngine.InputSystem.InputActionMap FindActionMap(System.Guid id);
        public UnityEngine.InputSystem.InputActionMap FindActionMap(string nameOrId, bool throwIfNotFound = False);
        public System.Nullable<UnityEngine.InputSystem.InputControlScheme> FindControlScheme(string name);
        public int FindControlSchemeIndex(string name);
        public static UnityEngine.InputSystem.InputActionAsset FromJson(string json);
        [System.Runtime.CompilerServices.IteratorStateMachine(typeof(UnityEngine.InputSystem.InputActionAsset.<GetEnumerator>d__27))] public virtual System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.InputAction> GetEnumerator();
        public void LoadFromJson(string json);
        public string ToJson();
    }

    public enum InputActionChange
    {
        public const UnityEngine.InputSystem.InputActionChange ActionCanceled = 6;
        public const UnityEngine.InputSystem.InputActionChange ActionDisabled = 1;
        public const UnityEngine.InputSystem.InputActionChange ActionEnabled = 0;
        public const UnityEngine.InputSystem.InputActionChange ActionMapDisabled = 3;
        public const UnityEngine.InputSystem.InputActionChange ActionMapEnabled = 2;
        public const UnityEngine.InputSystem.InputActionChange ActionPerformed = 5;
        public const UnityEngine.InputSystem.InputActionChange ActionStarted = 4;
        public const UnityEngine.InputSystem.InputActionChange BoundControlsAboutToChange = 7;
        public const UnityEngine.InputSystem.InputActionChange BoundControlsChanged = 8;
        public int value__;
    }

    [System.Reflection.DefaultMember(@"Item")] public sealed class InputActionMap : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputAction>, System.Collections.IEnumerable, System.ICloneable, System.IDisposable, UnityEngine.InputSystem.IInputActionCollection, UnityEngine.ISerializationCallbackReceiver
    {
        public event System.Action<UnityEngine.InputSystem.InputAction.CallbackContext> actionTriggered;
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputAction> actions { get; }
        public UnityEngine.InputSystem.InputActionAsset asset { get; }
        public virtual System.Nullable<UnityEngine.InputSystem.InputBinding> bindingMask { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputBinding> bindings { get; }
        public virtual UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputControlScheme> controlSchemes { get; }
        public virtual System.Nullable<UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputDevice>> devices { get; set; }
        public bool enabled { get; }
        public System.Guid id { get; }
        public UnityEngine.InputSystem.InputAction this[string actionNameOrId] { get; }
        public string name { get; }
        public InputActionMap() {}
        public InputActionMap(string name) {}
        public UnityEngine.InputSystem.InputActionMap Clone();
        public virtual bool Contains(UnityEngine.InputSystem.InputAction action);
        public virtual void Disable();
        public virtual void Dispose();
        public virtual void Enable();
        public UnityEngine.InputSystem.InputAction FindAction(System.Guid id);
        public UnityEngine.InputSystem.InputAction FindAction(string nameOrId, bool throwIfNotFound = False);
        public static UnityEngine.InputSystem.InputActionMap[] FromJson(string json);
        public virtual System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.InputAction> GetEnumerator();
        public bool IsUsableWithDevice(UnityEngine.InputSystem.InputDevice device);
        public virtual void OnAfterDeserialize();
        public virtual void OnBeforeSerialize();
        public string ToJson();
        public static string ToJson(System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputActionMap> maps);
        public virtual string ToString();
    }

    public enum InputActionPhase
    {
        public const UnityEngine.InputSystem.InputActionPhase Canceled = 4;
        public const UnityEngine.InputSystem.InputActionPhase Disabled = 0;
        public const UnityEngine.InputSystem.InputActionPhase Performed = 3;
        public const UnityEngine.InputSystem.InputActionPhase Started = 2;
        public int value__;
        public const UnityEngine.InputSystem.InputActionPhase Waiting = 1;
    }

    public struct InputActionProperty : System.IEquatable<UnityEngine.InputSystem.InputAction>, System.IEquatable<UnityEngine.InputSystem.InputActionProperty>, System.IEquatable<UnityEngine.InputSystem.InputActionReference>
    {
        public UnityEngine.InputSystem.InputAction action { get; }
        public UnityEngine.InputSystem.InputActionReference reference { get; }
        public InputActionProperty(UnityEngine.InputSystem.InputAction action) {}
        public InputActionProperty(UnityEngine.InputSystem.InputActionReference reference) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.InputAction other);
        public virtual bool Equals(UnityEngine.InputSystem.InputActionProperty other);
        public virtual bool Equals(UnityEngine.InputSystem.InputActionReference other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.InputSystem.InputActionProperty left, UnityEngine.InputSystem.InputActionProperty right);
        public static bool operator !=(UnityEngine.InputSystem.InputActionProperty left, UnityEngine.InputSystem.InputActionProperty right);
    }

    [System.Runtime.CompilerServices.Extension] public static class InputActionRebindingExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static int ApplyBindingOverride(UnityEngine.InputSystem.InputActionMap actionMap, UnityEngine.InputSystem.InputBinding bindingOverride);
        [System.Runtime.CompilerServices.Extension] public static void ApplyBindingOverride(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputBinding bindingOverride);
        [System.Runtime.CompilerServices.Extension] public static void ApplyBindingOverride(UnityEngine.InputSystem.InputAction action, int bindingIndex, string path);
        [System.Runtime.CompilerServices.Extension] public static void ApplyBindingOverride(UnityEngine.InputSystem.InputAction action, int bindingIndex, UnityEngine.InputSystem.InputBinding bindingOverride);
        [System.Runtime.CompilerServices.Extension] public static void ApplyBindingOverride(UnityEngine.InputSystem.InputActionMap actionMap, int bindingIndex, UnityEngine.InputSystem.InputBinding bindingOverride);
        [System.Runtime.CompilerServices.Extension] public static void ApplyBindingOverride(UnityEngine.InputSystem.InputAction action, string newPath, string group = default(string), string path = default(string));
        [System.Runtime.CompilerServices.Extension] public static void ApplyBindingOverrides(UnityEngine.InputSystem.InputActionMap actionMap, System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputBinding> overrides);
        [System.Runtime.CompilerServices.Extension] public static int ApplyBindingOverridesOnMatchingControls(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputControl control);
        [System.Runtime.CompilerServices.Extension] public static int ApplyBindingOverridesOnMatchingControls(UnityEngine.InputSystem.InputActionMap actionMap, UnityEngine.InputSystem.InputControl control);
        [System.Runtime.CompilerServices.Extension] public static string GetBindingDisplayString(UnityEngine.InputSystem.InputAction action, int bindingIndex, UnityEngine.InputSystem.InputBinding.DisplayStringOptions options = 0);
        [System.Runtime.CompilerServices.Extension] public static string GetBindingDisplayString(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputBinding bindingMask, UnityEngine.InputSystem.InputBinding.DisplayStringOptions options = 0);
        [System.Runtime.CompilerServices.Extension] public static string GetBindingDisplayString(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputBinding.DisplayStringOptions options = 0, string group = default(string));
        [System.Runtime.CompilerServices.Extension] public static string GetBindingDisplayString(UnityEngine.InputSystem.InputAction action, int bindingIndex, out string deviceLayoutName, out string controlPath, UnityEngine.InputSystem.InputBinding.DisplayStringOptions options = 0);
        [System.Runtime.CompilerServices.Extension] public static System.Nullable<UnityEngine.InputSystem.InputBinding> GetBindingForControl(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputControl control);
        [System.Runtime.CompilerServices.Extension] public static int GetBindingIndex(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputBinding bindingMask);
        [System.Runtime.CompilerServices.Extension] public static int GetBindingIndex(UnityEngine.InputSystem.InputAction action, string group = default(string), string path = default(string));
        [System.Runtime.CompilerServices.Extension] public static int GetBindingIndexForControl(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputControl control);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation PerformInteractiveRebinding(UnityEngine.InputSystem.InputAction action, int bindingIndex = -1);
        [System.Runtime.CompilerServices.Extension] public static void RemoveAllBindingOverrides(UnityEngine.InputSystem.InputAction action);
        [System.Runtime.CompilerServices.Extension] public static void RemoveAllBindingOverrides(UnityEngine.InputSystem.InputActionMap actionMap);
        [System.Runtime.CompilerServices.Extension] public static void RemoveBindingOverride(UnityEngine.InputSystem.InputAction action, int bindingIndex);
        [System.Runtime.CompilerServices.Extension] public static void RemoveBindingOverride(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputBinding bindingMask);
        [System.Runtime.CompilerServices.Extension] public static void RemoveBindingOverrides(UnityEngine.InputSystem.InputActionMap actionMap, System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputBinding> overrides);
        public sealed class RebindingOperation : System.IDisposable
        {
            public const float kDefaultMagnitudeThreshold = 0.2;
            public UnityEngine.InputSystem.InputAction action { get; }
            public System.Nullable<UnityEngine.InputSystem.InputBinding> bindingMask { get; }
            public bool canceled { get; }
            public UnityEngine.InputSystem.InputControlList<UnityEngine.InputSystem.InputControl> candidates { get; }
            public bool completed { get; }
            public string expectedControlType { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<float> magnitudes { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<float> scores { get; }
            public UnityEngine.InputSystem.InputControl selectedControl { get; }
            public bool started { get; }
            public double startTime { get; }
            public float timeout { get; }
            public RebindingOperation() {}
            public void AddCandidate(UnityEngine.InputSystem.InputControl control, float score, float magnitude = -1);
            public void Cancel();
            public void Complete();
            public virtual void Dispose();
            protected virtual void Finalize();
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation OnApplyBinding(System.Action<UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation, string> callback);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation OnCancel(System.Action<UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation> callback);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation OnComplete(System.Action<UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation> callback);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation OnComputeScore(System.Func<UnityEngine.InputSystem.InputControl, UnityEngine.InputSystem.LowLevel.InputEventPtr, float> callback);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation OnGeneratePath(System.Func<UnityEngine.InputSystem.InputControl, string> callback);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation OnMatchWaitForAnother(float seconds);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation OnPotentialMatch(System.Action<UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation> callback);
            public void RemoveCandidate(UnityEngine.InputSystem.InputControl control);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation Reset();
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation Start();
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithAction(UnityEngine.InputSystem.InputAction action);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithBindingGroup(string group);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithBindingMask(System.Nullable<UnityEngine.InputSystem.InputBinding> bindingMask);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithCancelingThrough(string binding);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithCancelingThrough(UnityEngine.InputSystem.InputControl control);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithControlsExcluding(string path);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithControlsHavingToMatchPath(string path);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithExpectedControlType<TControl>() where TControl : UnityEngine.InputSystem.InputControl;
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithExpectedControlType(string layoutName);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithExpectedControlType(System.Type type);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithMagnitudeHavingToBeGreaterThan(float magnitude);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithMatchingEventsBeingSuppressed(bool value = True);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithoutGeneralizingPathOfSelectedControl();
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithoutIgnoringNoisyControls();
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithRebindAddingNewBinding(string group = default(string));
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithTargetBinding(int bindingIndex);
            public UnityEngine.InputSystem.InputActionRebindingExtensions.RebindingOperation WithTimeout(float timeInSeconds);
        }
    }

    public class InputActionReference : UnityEngine.ScriptableObject
    {
        public UnityEngine.InputSystem.InputAction action { get; }
        public UnityEngine.InputSystem.InputActionAsset asset { get; }
        public InputActionReference() {}
        public static UnityEngine.InputSystem.InputActionReference Create(UnityEngine.InputSystem.InputAction action);
        public static UnityEngine.InputSystem.InputAction op_Implicit(UnityEngine.InputSystem.InputActionReference reference);
        public void Set(UnityEngine.InputSystem.InputAction action);
        public void Set(UnityEngine.InputSystem.InputActionAsset asset, string mapName, string actionName);
        public UnityEngine.InputSystem.InputAction ToInputAction();
        public virtual string ToString();
    }

    [System.Runtime.CompilerServices.Extension] public static class InputActionSetupExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputAction AddAction(UnityEngine.InputSystem.InputActionMap map, string name, UnityEngine.InputSystem.InputActionType type = 0, string binding = default(string), string interactions = default(string), string processors = default(string), string groups = default(string), string expectedControlLayout = default(string));
        [System.Runtime.CompilerServices.Extension] public static void AddActionMap(UnityEngine.InputSystem.InputActionAsset asset, UnityEngine.InputSystem.InputActionMap map);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionMap AddActionMap(UnityEngine.InputSystem.InputActionAsset asset, string name);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax AddBinding(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputBinding binding = default(UnityEngine.InputSystem.InputBinding));
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax AddBinding(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputControl control);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax AddBinding(UnityEngine.InputSystem.InputActionMap actionMap, UnityEngine.InputSystem.InputBinding binding);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax AddBinding(UnityEngine.InputSystem.InputAction action, string path, string interactions = default(string), string processors = default(string), string groups = default(string));
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax AddBinding(UnityEngine.InputSystem.InputActionMap actionMap, string path, System.Guid action, string interactions = default(string), string groups = default(string));
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax AddBinding(UnityEngine.InputSystem.InputActionMap actionMap, string path, string interactions = default(string), string groups = default(string), string action = default(string));
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax AddBinding(UnityEngine.InputSystem.InputActionMap actionMap, string path, UnityEngine.InputSystem.InputAction action, string interactions = default(string), string groups = default(string));
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.CompositeSyntax AddCompositeBinding(UnityEngine.InputSystem.InputAction action, string composite, string interactions = default(string), string processors = default(string));
        [System.Runtime.CompilerServices.Extension] public static void AddControlScheme(UnityEngine.InputSystem.InputActionAsset asset, UnityEngine.InputSystem.InputControlScheme controlScheme);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax AddControlScheme(UnityEngine.InputSystem.InputActionAsset asset, string name);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax ChangeBinding(UnityEngine.InputSystem.InputAction action, int index);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax ChangeBinding(UnityEngine.InputSystem.InputAction action, UnityEngine.InputSystem.InputBinding match);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax ChangeBindingWithGroup(UnityEngine.InputSystem.InputAction action, string group);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax ChangeBindingWithId(UnityEngine.InputSystem.InputAction action, System.Guid id);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax ChangeBindingWithId(UnityEngine.InputSystem.InputAction action, string id);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax ChangeBindingWithPath(UnityEngine.InputSystem.InputAction action, string path);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputControlScheme OrWithOptionalDevice(UnityEngine.InputSystem.InputControlScheme scheme, string controlPath);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputControlScheme OrWithRequiredDevice(UnityEngine.InputSystem.InputControlScheme scheme, string controlPath);
        [System.Runtime.CompilerServices.Extension] public static void RemoveAction(UnityEngine.InputSystem.InputAction action);
        [System.Runtime.CompilerServices.Extension] public static void RemoveAction(UnityEngine.InputSystem.InputActionAsset asset, string nameOrId);
        [System.Runtime.CompilerServices.Extension] public static void RemoveActionMap(UnityEngine.InputSystem.InputActionAsset asset, string nameOrId);
        [System.Runtime.CompilerServices.Extension] public static void RemoveActionMap(UnityEngine.InputSystem.InputActionAsset asset, UnityEngine.InputSystem.InputActionMap map);
        [System.Runtime.CompilerServices.Extension] public static void RemoveControlScheme(UnityEngine.InputSystem.InputActionAsset asset, string name);
        [System.Runtime.CompilerServices.Extension] public static void Rename(UnityEngine.InputSystem.InputAction action, string newName);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputControlScheme WithBindingGroup(UnityEngine.InputSystem.InputControlScheme scheme, string bindingGroup);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputControlScheme WithOptionalDevice(UnityEngine.InputSystem.InputControlScheme scheme, string controlPath);
        [System.Runtime.CompilerServices.Extension] public static UnityEngine.InputSystem.InputControlScheme WithRequiredDevice(UnityEngine.InputSystem.InputControlScheme scheme, string controlPath);
        public struct BindingSyntax
        {
            public void Erase();
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax To(UnityEngine.InputSystem.InputBinding binding);
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax Triggering(UnityEngine.InputSystem.InputAction action);
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithGroup(string group);
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithGroups(string groups);
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithInteraction<TInteraction>() where TInteraction : UnityEngine.InputSystem.IInputInteraction;
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithInteraction(string interaction);
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithInteractions(string interactions);
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithName(string name);
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithPath(string path);
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithProcessor<TProcessor>();
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithProcessor(string processor);
            public UnityEngine.InputSystem.InputActionSetupExtensions.BindingSyntax WithProcessors(string processors);
        }
        public struct CompositeSyntax
        {
            public UnityEngine.InputSystem.InputActionSetupExtensions.CompositeSyntax With(string name, string binding, string groups = default(string));
        }
        public struct ControlSchemeSyntax
        {
            public UnityEngine.InputSystem.InputControlScheme Done();
            public UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax OrWithOptionalDevice<TDevice>() where TDevice : UnityEngine.InputSystem.InputDevice;
            public UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax OrWithOptionalDevice(string controlPath);
            public UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax OrWithRequiredDevice<TDevice>() where TDevice : UnityEngine.InputSystem.InputDevice;
            public UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax OrWithRequiredDevice(string controlPath);
            public UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax WithBindingGroup(string bindingGroup);
            public UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax WithOptionalDevice<TDevice>() where TDevice : UnityEngine.InputSystem.InputDevice;
            public UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax WithOptionalDevice(string controlPath);
            public UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax WithRequiredDevice<TDevice>() where TDevice : UnityEngine.InputSystem.InputDevice;
            public UnityEngine.InputSystem.InputActionSetupExtensions.ControlSchemeSyntax WithRequiredDevice(string controlPath);
        }
    }

    public enum InputActionType
    {
        public const UnityEngine.InputSystem.InputActionType Button = 1;
        public const UnityEngine.InputSystem.InputActionType PassThrough = 2;
        public const UnityEngine.InputSystem.InputActionType Value = 0;
        public int value__;
    }

    public struct InputBinding : System.IEquatable<UnityEngine.InputSystem.InputBinding>
    {
        public const char Separator = ;;
        public string action { get; set; }
        public string effectiveInteractions { get; }
        public string effectivePath { get; }
        public string effectiveProcessors { get; }
        public string groups { get; set; }
        public System.Guid id { get; set; }
        public string interactions { get; set; }
        public bool isComposite { get; set; }
        public bool isPartOfComposite { get; set; }
        public string name { get; set; }
        public string overrideInteractions { get; set; }
        public string overridePath { get; set; }
        public string overrideProcessors { get; set; }
        public string path { get; set; }
        public string processors { get; set; }
        public InputBinding(string path, string action = default(string), string groups = default(string), string processors = default(string), string interactions = default(string), string name = default(string)) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.InputBinding other);
        public virtual int GetHashCode();
        public string GetNameOfComposite();
        public static UnityEngine.InputSystem.InputBinding MaskByGroup(string group);
        public static UnityEngine.InputSystem.InputBinding MaskByGroups(params string[] groups);
        public bool Matches(UnityEngine.InputSystem.InputBinding binding);
        public static bool operator ==(UnityEngine.InputSystem.InputBinding left, UnityEngine.InputSystem.InputBinding right);
        public static bool operator !=(UnityEngine.InputSystem.InputBinding left, UnityEngine.InputSystem.InputBinding right);
        public string ToDisplayString(UnityEngine.InputSystem.InputBinding.DisplayStringOptions options = 0, UnityEngine.InputSystem.InputControl control = default(UnityEngine.InputSystem.InputControl));
        public string ToDisplayString(out string deviceLayoutName, out string controlPath, UnityEngine.InputSystem.InputBinding.DisplayStringOptions options = 0, UnityEngine.InputSystem.InputControl control = default(UnityEngine.InputSystem.InputControl));
        public virtual string ToString();
        [System.Flags] public enum DisplayStringOptions
        {
            public const UnityEngine.InputSystem.InputBinding.DisplayStringOptions DontIncludeInteractions = 4;
            public const UnityEngine.InputSystem.InputBinding.DisplayStringOptions DontOmitDevice = 2;
            public const UnityEngine.InputSystem.InputBinding.DisplayStringOptions DontUseShortDisplayNames = 1;
            public const UnityEngine.InputSystem.InputBinding.DisplayStringOptions IgnoreBindingOverrides = 8;
            public int value__;
        }
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputBindingComposite
    {
        public abstract int valueSizeInBytes { get; }
        public abstract System.Type valueType { get; }
        protected InputBindingComposite() {}
        public virtual float EvaluateMagnitude(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
        public static string GetExpectedControlLayoutName(string composite, string part);
        public abstract void ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context, void* buffer, int bufferSize);
        public abstract object ReadValueAsObject(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputBindingComposite<TValue> : UnityEngine.InputSystem.InputBindingComposite where TValue : System.ValueType, new()
    {
        public virtual int valueSizeInBytes { get; }
        public virtual System.Type valueType { get; }
        protected InputBindingComposite() {}
        public abstract TValue ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
        public virtual void ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context, void* buffer, int bufferSize);
        public virtual object ReadValueAsObject(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
    }

    public struct InputBindingCompositeContext
    {
        public TValue ReadValue<TValue>(int partNumber) where TValue : System.ValueType, System.IComparable<TValue>, new();
        public TValue ReadValue<TValue, TComparer>(int partNumber, TComparer comparer = default(TComparer)) where TValue : System.ValueType, new() where TComparer : System.Collections.Generic.IComparer<TValue>;
        public TValue ReadValue<TValue>(int partNumber, out UnityEngine.InputSystem.InputControl sourceControl) where TValue : System.ValueType, System.IComparable<TValue>, new();
        public TValue ReadValue<TValue, TComparer>(int partNumber, out UnityEngine.InputSystem.InputControl sourceControl, TComparer comparer = default(TComparer)) where TValue : System.ValueType, new() where TComparer : System.Collections.Generic.IComparer<TValue>;
        public bool ReadValueAsButton(int partNumber);
    }

    [System.Diagnostics.DebuggerDisplay(@"{DebuggerDisplay(),nq}")] [System.Reflection.DefaultMember(@"Item")] [UnityEngine.Scripting.Preserve] public abstract class InputControl
    {
        protected UnityEngine.InputSystem.LowLevel.InputStateBlock m_StateBlock;
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.InternedString> aliases { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputControl> children { get; }
        protected void* currentStatePtr { get; }
        protected void* defaultStatePtr { get; }
        public UnityEngine.InputSystem.InputDevice device { get; }
        public string displayName { get; protected set; }
        public UnityEngine.InputSystem.InputControl this[string path] { get; }
        public string layout { get; }
        public string name { get; }
        protected void* noiseMaskPtr { get; }
        public bool noisy { get; }
        public UnityEngine.InputSystem.InputControl parent { get; }
        public string path { get; }
        protected void* previousFrameStatePtr { get; }
        public string shortDisplayName { get; protected set; }
        public UnityEngine.InputSystem.LowLevel.InputStateBlock stateBlock { get; }
        protected System.UInt32 stateOffsetRelativeToDeviceRoot { get; }
        public bool synthetic { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.InternedString> usages { get; }
        public abstract int valueSizeInBytes { get; }
        public abstract System.Type valueType { get; }
        public string variants { get; }
        protected InputControl() {}
        public abstract bool CompareValue(void* firstStatePtr, void* secondStatePtr);
        public float EvaluateMagnitude();
        public virtual float EvaluateMagnitude(void* statePtr);
        protected virtual void FinishSetup();
        public TControl GetChildControl<TControl>(string path) where TControl : UnityEngine.InputSystem.InputControl;
        public UnityEngine.InputSystem.InputControl GetChildControl(string path);
        public abstract object ReadValueFromBufferAsObject(void* buffer, int bufferSize);
        public abstract object ReadValueFromStateAsObject(void* statePtr);
        public abstract void ReadValueFromStateIntoBuffer(void* statePtr, void* bufferPtr, int bufferSize);
        protected virtual void RefreshConfiguration();
        protected void RefreshConfigurationIfNeeded();
        public virtual string ToString();
        public TControl TryGetChildControl<TControl>(string path) where TControl : UnityEngine.InputSystem.InputControl;
        public UnityEngine.InputSystem.InputControl TryGetChildControl(string path);
        public virtual void WriteValueFromBufferIntoState(void* bufferPtr, int bufferSize, void* statePtr);
        public virtual void WriteValueFromObjectIntoState(object value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputControl<TValue> : UnityEngine.InputSystem.InputControl where TValue : System.ValueType, new()
    {
        public virtual int valueSizeInBytes { get; }
        public virtual System.Type valueType { get; }
        protected InputControl() {}
        public virtual bool CompareValue(void* firstStatePtr, void* secondStatePtr);
        public TValue ProcessValue(TValue value);
        public TValue ReadDefaultValue();
        public TValue ReadUnprocessedValue();
        public abstract TValue ReadUnprocessedValueFromState(void* statePtr);
        public TValue ReadValue();
        public virtual object ReadValueFromBufferAsObject(void* buffer, int bufferSize);
        public TValue ReadValueFromPreviousFrame();
        public TValue ReadValueFromState(void* statePtr);
        public virtual object ReadValueFromStateAsObject(void* statePtr);
        public virtual void ReadValueFromStateIntoBuffer(void* statePtr, void* bufferPtr, int bufferSize);
        public virtual void WriteValueFromBufferIntoState(void* bufferPtr, int bufferSize, void* statePtr);
        public virtual void WriteValueFromObjectIntoState(object value, void* statePtr);
        public virtual void WriteValueIntoState(TValue value, void* statePtr);
    }

    [System.Runtime.CompilerServices.Extension] public static class InputControlExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static void AccumulateValueInEvent(UnityEngine.InputSystem.InputControl<float> control, void* currentStatePtr, UnityEngine.InputSystem.LowLevel.InputEventPtr newState);
        [System.Runtime.CompilerServices.Extension] public static bool CheckStateIsAtDefault(UnityEngine.InputSystem.InputControl control);
        [System.Runtime.CompilerServices.Extension] public static bool CheckStateIsAtDefault(UnityEngine.InputSystem.InputControl control, void* statePtr, void* maskPtr = default(void*));
        [System.Runtime.CompilerServices.Extension] public static bool CheckStateIsAtDefaultIgnoringNoise(UnityEngine.InputSystem.InputControl control);
        [System.Runtime.CompilerServices.Extension] public static bool CheckStateIsAtDefaultIgnoringNoise(UnityEngine.InputSystem.InputControl control, void* statePtr);
        [System.Runtime.CompilerServices.Extension] public static bool CompareState(UnityEngine.InputSystem.InputControl control, void* statePtr, void* maskPtr = default(void*));
        [System.Runtime.CompilerServices.Extension] public static bool CompareState(UnityEngine.InputSystem.InputControl control, void* firstStatePtr, void* secondStatePtr, void* maskPtr = default(void*));
        [System.Runtime.CompilerServices.Extension] public static bool CompareStateIgnoringNoise(UnityEngine.InputSystem.InputControl control, void* statePtr);
        [System.Runtime.CompilerServices.Extension] public static void CopyState<TState>(UnityEngine.InputSystem.InputDevice device, out TState state) where TState : System.ValueType, UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo, new();
        [System.Runtime.CompilerServices.Extension] public static void CopyState(UnityEngine.InputSystem.InputDevice device, void* buffer, int bufferSizeInBytes);
        [System.Runtime.CompilerServices.Extension] public static void FindControlsRecursive<TControl>(UnityEngine.InputSystem.InputControl parent, System.Collections.Generic.IList<TControl> controls, System.Func<TControl, bool> predicate) where TControl : UnityEngine.InputSystem.InputControl;
        [System.Runtime.CompilerServices.Extension] public static TControl FindInParentChain<TControl>(UnityEngine.InputSystem.InputControl control) where TControl : UnityEngine.InputSystem.InputControl;
        [System.Runtime.CompilerServices.Extension] public static void* GetStatePtrFromStateEvent(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
        [System.Runtime.CompilerServices.Extension] public static bool HasValueChangeInEvent(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
        [System.Runtime.CompilerServices.Extension] public static bool HasValueChangeInState(UnityEngine.InputSystem.InputControl control, void* statePtr);
        [System.Runtime.CompilerServices.Extension] public static bool IsActuated(UnityEngine.InputSystem.InputControl control, float threshold = 0);
        [System.Runtime.CompilerServices.Extension] public static bool IsPressed(UnityEngine.InputSystem.InputControl control, float buttonPressPoint = 0);
        [System.Runtime.CompilerServices.Extension] public static void QueueValueChange<TValue>(UnityEngine.InputSystem.InputControl<TValue> control, TValue value, double time = -1) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static object ReadDefaultValueAsObject(UnityEngine.InputSystem.InputControl control);
        [System.Runtime.CompilerServices.Extension] public static TValue ReadUnprocessedValueFromEvent<TValue>(UnityEngine.InputSystem.InputControl<TValue> control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static bool ReadUnprocessedValueFromEvent<TValue>(UnityEngine.InputSystem.InputControl<TValue> control, UnityEngine.InputSystem.LowLevel.InputEventPtr inputEvent, out TValue value) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static object ReadValueAsObject(UnityEngine.InputSystem.InputControl control);
        [System.Runtime.CompilerServices.Extension] public static TValue ReadValueFromEvent<TValue>(UnityEngine.InputSystem.InputControl<TValue> control, UnityEngine.InputSystem.LowLevel.InputEventPtr inputEvent) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static bool ReadValueFromEvent<TValue>(UnityEngine.InputSystem.InputControl<TValue> control, UnityEngine.InputSystem.LowLevel.InputEventPtr inputEvent, out TValue value) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static void ReadValueIntoBuffer(UnityEngine.InputSystem.InputControl control, void* buffer, int bufferSize);
        [System.Runtime.CompilerServices.Extension] public static void WriteValueFromObjectIntoEvent(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, object value);
        [System.Runtime.CompilerServices.Extension] public static void WriteValueIntoEvent<TValue>(UnityEngine.InputSystem.InputControl control, TValue value, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static void WriteValueIntoEvent<TValue>(UnityEngine.InputSystem.InputControl<TValue> control, TValue value, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static void WriteValueIntoState(UnityEngine.InputSystem.InputControl control, void* statePtr);
        [System.Runtime.CompilerServices.Extension] public static void WriteValueIntoState<TValue>(UnityEngine.InputSystem.InputControl<TValue> control, void* statePtr) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static void WriteValueIntoState<TValue>(UnityEngine.InputSystem.InputControl control, TValue value, void* statePtr) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static void WriteValueIntoState<TValue>(UnityEngine.InputSystem.InputControl<TValue> control, TValue value, void* statePtr) where TValue : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static void WriteValueIntoState<TValue, TState>(UnityEngine.InputSystem.InputControl<TValue> control, TValue value, ref TState state) where TValue : System.ValueType, new() where TState : System.ValueType, UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo, new();
    }

    public enum InputControlLayoutChange
    {
        public const UnityEngine.InputSystem.InputControlLayoutChange Added = 0;
        public const UnityEngine.InputSystem.InputControlLayoutChange Removed = 1;
        public const UnityEngine.InputSystem.InputControlLayoutChange Replaced = 2;
        public int value__;
    }

    [System.Diagnostics.DebuggerDisplay(@"Count = {Count}")] [System.Diagnostics.DebuggerTypeProxy(typeof(UnityEngine.InputSystem.InputControlListDebugView<>))] [System.Reflection.DefaultMember(@"Item")] public struct InputControlList<TControl> : System.Collections.Generic.ICollection<TControl>, System.Collections.Generic.IEnumerable<TControl>, System.Collections.Generic.IList<TControl>, System.Collections.Generic.IReadOnlyCollection<TControl>, System.Collections.Generic.IReadOnlyList<TControl>, System.Collections.IEnumerable, System.IDisposable where TControl : UnityEngine.InputSystem.InputControl
    {
        public int Capacity { get; set; }
        public virtual int Count { get; }
        public virtual bool IsReadOnly { get; }
        public virtual TControl this[int index] { get; set; }
        public InputControlList(params TControl[] values) {}
        public InputControlList(System.Collections.Generic.IEnumerable<TControl> values, Unity.Collections.Allocator allocator = 4) {}
        public InputControlList(Unity.Collections.Allocator allocator, int initialCapacity = 0) {}
        public virtual void Add(TControl item);
        public void AddRange(System.Collections.Generic.IEnumerable<TControl> list, int count = -1, int destinationIndex = -1);
        public void AddSlice<TList>(TList list, int count = -1, int destinationIndex = -1, int sourceIndex = 0) where TList : System.Collections.Generic.IReadOnlyList<TControl>;
        public virtual void Clear();
        public virtual bool Contains(TControl item);
        public virtual void CopyTo(TControl[] array, int arrayIndex);
        public virtual void Dispose();
        public virtual System.Collections.Generic.IEnumerator<TControl> GetEnumerator();
        public virtual int IndexOf(TControl item);
        public virtual void Insert(int index, TControl item);
        public virtual bool Remove(TControl item);
        public virtual void RemoveAt(int index);
        public void Sort<TCompare>(int startIndex, int count, TCompare comparer) where TCompare : System.Collections.Generic.IComparer<TControl>;
        public void SwapElements(int index1, int index2);
        public TControl[] ToArray(bool dispose = False);
        public virtual string ToString();
    }

    public static class InputControlPath
    {
        public const string DoubleWildcard = **;
        public const char Separator = /;
        public const string Wildcard = *;
        public static string Combine(UnityEngine.InputSystem.InputControl parent, string path);
        public static bool Matches(string expected, UnityEngine.InputSystem.InputControl control);
        public static bool MatchesPrefix(string expected, UnityEngine.InputSystem.InputControl control);
        public static string ToHumanReadableString(string path, UnityEngine.InputSystem.InputControlPath.HumanReadableStringOptions options = 0, UnityEngine.InputSystem.InputControl control = default(UnityEngine.InputSystem.InputControl));
        public static string ToHumanReadableString(string path, out string deviceLayoutName, out string controlPath, UnityEngine.InputSystem.InputControlPath.HumanReadableStringOptions options = 0, UnityEngine.InputSystem.InputControl control = default(UnityEngine.InputSystem.InputControl));
        public static TControl TryFindChild<TControl>(UnityEngine.InputSystem.InputControl control, string path, int indexInPath = 0) where TControl : UnityEngine.InputSystem.InputControl;
        public static UnityEngine.InputSystem.InputControl TryFindChild(UnityEngine.InputSystem.InputControl control, string path, int indexInPath = 0);
        public static TControl TryFindControl<TControl>(UnityEngine.InputSystem.InputControl control, string path, int indexInPath = 0) where TControl : UnityEngine.InputSystem.InputControl;
        public static UnityEngine.InputSystem.InputControl TryFindControl(UnityEngine.InputSystem.InputControl control, string path, int indexInPath = 0);
        public static UnityEngine.InputSystem.InputControl[] TryFindControls(UnityEngine.InputSystem.InputControl control, string path, int indexInPath = 0);
        public static int TryFindControls<TControl>(UnityEngine.InputSystem.InputControl control, string path, int indexInPath, ref UnityEngine.InputSystem.InputControlList<TControl> matches) where TControl : UnityEngine.InputSystem.InputControl;
        public static int TryFindControls(UnityEngine.InputSystem.InputControl control, string path, ref UnityEngine.InputSystem.InputControlList<UnityEngine.InputSystem.InputControl> matches, int indexInPath = 0);
        public static string TryGetControlLayout(string path);
        public static string TryGetDeviceLayout(string path);
        public static string[] TryGetDeviceUsages(string path);
        [System.Flags] public enum HumanReadableStringOptions
        {
            public const UnityEngine.InputSystem.InputControlPath.HumanReadableStringOptions None = 0;
            public const UnityEngine.InputSystem.InputControlPath.HumanReadableStringOptions OmitDevice = 2;
            public const UnityEngine.InputSystem.InputControlPath.HumanReadableStringOptions UseShortNames = 4;
            public int value__;
        }
    }

    public struct InputControlScheme : System.IEquatable<UnityEngine.InputSystem.InputControlScheme>
    {
        public string bindingGroup { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputControlScheme.DeviceRequirement> deviceRequirements { get; }
        public string name { get; }
        public InputControlScheme(string name, System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputControlScheme.DeviceRequirement> devices = default(System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputControlScheme.DeviceRequirement>), string bindingGroup = default(string)) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.InputControlScheme other);
        public static System.Nullable<UnityEngine.InputSystem.InputControlScheme> FindControlSchemeForDevice<TSchemes>(UnityEngine.InputSystem.InputDevice device, TSchemes schemes) where TSchemes : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputControlScheme>;
        public static System.Nullable<UnityEngine.InputSystem.InputControlScheme> FindControlSchemeForDevices<TDevices, TSchemes>(TDevices devices, TSchemes schemes, UnityEngine.InputSystem.InputDevice mustIncludeDevice = default(UnityEngine.InputSystem.InputDevice), bool allowUnsuccesfulMatch = False) where TDevices : System.Collections.Generic.IReadOnlyList<UnityEngine.InputSystem.InputDevice> where TSchemes : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputControlScheme>;
        public static bool FindControlSchemeForDevices<TDevices, TSchemes>(TDevices devices, TSchemes schemes, out UnityEngine.InputSystem.InputControlScheme controlScheme, out UnityEngine.InputSystem.InputControlScheme.MatchResult matchResult, UnityEngine.InputSystem.InputDevice mustIncludeDevice = default(UnityEngine.InputSystem.InputDevice), bool allowUnsuccessfulMatch = False) where TDevices : System.Collections.Generic.IReadOnlyList<UnityEngine.InputSystem.InputDevice> where TSchemes : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputControlScheme>;
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.InputSystem.InputControlScheme left, UnityEngine.InputSystem.InputControlScheme right);
        public static bool operator !=(UnityEngine.InputSystem.InputControlScheme left, UnityEngine.InputSystem.InputControlScheme right);
        public UnityEngine.InputSystem.InputControlScheme.MatchResult PickDevicesFrom<TDevices>(TDevices devices, UnityEngine.InputSystem.InputDevice favorDevice = default(UnityEngine.InputSystem.InputDevice)) where TDevices : System.Collections.Generic.IReadOnlyList<UnityEngine.InputSystem.InputDevice>;
        public bool SupportsDevice(UnityEngine.InputSystem.InputDevice device);
        public virtual string ToString();
        public struct DeviceRequirement : System.IEquatable<UnityEngine.InputSystem.InputControlScheme.DeviceRequirement>
        {
            public string controlPath { get; set; }
            public bool isAND { get; set; }
            public bool isOptional { get; set; }
            public bool isOR { get; set; }
            public virtual bool Equals(object obj);
            public virtual bool Equals(UnityEngine.InputSystem.InputControlScheme.DeviceRequirement other);
            public virtual int GetHashCode();
            public static bool operator ==(UnityEngine.InputSystem.InputControlScheme.DeviceRequirement left, UnityEngine.InputSystem.InputControlScheme.DeviceRequirement right);
            public static bool operator !=(UnityEngine.InputSystem.InputControlScheme.DeviceRequirement left, UnityEngine.InputSystem.InputControlScheme.DeviceRequirement right);
            public virtual string ToString();
        }
        [System.Reflection.DefaultMember(@"Item")] public struct MatchResult : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputControlScheme.MatchResult.Match>, System.Collections.IEnumerable, System.IDisposable
        {
            public UnityEngine.InputSystem.InputControlList<UnityEngine.InputSystem.InputDevice> devices { get; }
            public bool hasMissingOptionalDevices { get; }
            public bool hasMissingRequiredDevices { get; }
            public bool isSuccessfulMatch { get; }
            public UnityEngine.InputSystem.InputControlScheme.MatchResult.Match this[int index] { get; }
            public float score { get; }
            public virtual void Dispose();
            public virtual System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.InputControlScheme.MatchResult.Match> GetEnumerator();
            public struct Match
            {
                public UnityEngine.InputSystem.InputControl control { get; }
                public UnityEngine.InputSystem.InputDevice device { get; }
                public bool isOptional { get; }
                public UnityEngine.InputSystem.InputControlScheme.DeviceRequirement requirement { get; }
                public int requirementIndex { get; }
            }
        }
    }

    [UnityEngine.Scripting.Preserve] public class InputDevice : UnityEngine.InputSystem.InputControl
    {
        public const int InvalidDeviceId = 0;
        public bool added { get; }
        [System.Obsolete(@"Use 'InputSystem.devices' instead. (UnityUpgradable) -> InputSystem.devices", false)] public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputDevice> all { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputControl> allControls { get; }
        public bool canRunInBackground { get; }
        public UnityEngine.InputSystem.Layouts.InputDeviceDescription description { get; }
        public int deviceId { get; }
        public bool enabled { get; }
        public double lastUpdateTime { get; }
        public bool native { get; }
        public bool remote { get; }
        public bool updateBeforeRender { get; }
        public virtual int valueSizeInBytes { get; }
        public virtual System.Type valueType { get; }
        public bool wasUpdatedThisFrame { get; }
        public InputDevice() {}
        public virtual bool CompareValue(void* firstStatePtr, void* secondStatePtr);
        public long ExecuteCommand<TCommand>(ref TCommand command) where TCommand : System.ValueType, UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo, new();
        public virtual void MakeCurrent();
        protected virtual void OnAdded();
        protected virtual void OnRemoved();
        public virtual object ReadValueFromBufferAsObject(void* buffer, int bufferSize);
        public virtual object ReadValueFromStateAsObject(void* statePtr);
        public virtual void ReadValueFromStateIntoBuffer(void* statePtr, void* bufferPtr, int bufferSize);
    }

    public enum InputDeviceChange
    {
        public const UnityEngine.InputSystem.InputDeviceChange Added = 0;
        public const UnityEngine.InputSystem.InputDeviceChange ConfigurationChanged = 7;
        public const UnityEngine.InputSystem.InputDeviceChange Destroyed = 8;
        public const UnityEngine.InputSystem.InputDeviceChange Disabled = 5;
        public const UnityEngine.InputSystem.InputDeviceChange Disconnected = 2;
        public const UnityEngine.InputSystem.InputDeviceChange Enabled = 4;
        public const UnityEngine.InputSystem.InputDeviceChange Reconnected = 3;
        public const UnityEngine.InputSystem.InputDeviceChange Removed = 1;
        public const UnityEngine.InputSystem.InputDeviceChange UsageChanged = 6;
        public int value__;
    }

    [System.Runtime.CompilerServices.Extension] public static class InputExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool IsActive(UnityEngine.InputSystem.TouchPhase phase);
        [System.Runtime.CompilerServices.Extension] public static bool IsEndedOrCanceled(UnityEngine.InputSystem.TouchPhase phase);
        [System.Runtime.CompilerServices.Extension] public static bool IsModifierKey(UnityEngine.InputSystem.Key key);
        [System.Runtime.CompilerServices.Extension] public static bool IsTextInputKey(UnityEngine.InputSystem.Key key);
    }

    public struct InputInteractionContext
    {
        public UnityEngine.InputSystem.InputAction action { get; }
        public UnityEngine.InputSystem.InputControl control { get; }
        public bool isStarted { get; }
        public bool isWaiting { get; }
        public UnityEngine.InputSystem.InputActionPhase phase { get; }
        public double startTime { get; }
        public double time { get; }
        public bool timerHasExpired { get; }
        public void Canceled();
        public bool ControlIsActuated(float threshold = 0);
        public void Performed();
        public void PerformedAndStayPerformed();
        public void PerformedAndStayStarted();
        public TValue ReadValue<TValue>() where TValue : System.ValueType, new();
        public void SetTimeout(float seconds);
        public void Started();
        public void Waiting();
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputProcessor
    {
        protected InputProcessor() {}
        public abstract void Process(void* buffer, int bufferSize, UnityEngine.InputSystem.InputControl control);
        public abstract object ProcessAsObject(object value, UnityEngine.InputSystem.InputControl control);
    }

    [UnityEngine.Scripting.Preserve] public abstract class InputProcessor<TValue> : UnityEngine.InputSystem.InputProcessor where TValue : System.ValueType, new()
    {
        protected InputProcessor() {}
        public abstract TValue Process(TValue value, UnityEngine.InputSystem.InputControl control);
        public virtual void Process(void* buffer, int bufferSize, UnityEngine.InputSystem.InputControl control);
        public virtual object ProcessAsObject(object value, UnityEngine.InputSystem.InputControl control);
    }

    public sealed class InputRemoting : System.IObservable<UnityEngine.InputSystem.InputRemoting.Message>, System.IObserver<UnityEngine.InputSystem.InputRemoting.Message>
    {
        public bool sending { get; }
        public void RemoveRemoteDevices(int participantId);
        public void StartSending();
        public void StopSending();
        public virtual System.IDisposable Subscribe(System.IObserver<UnityEngine.InputSystem.InputRemoting.Message> observer);
        public struct Message
        {
            public byte[] data;
            public int participantId;
            public UnityEngine.InputSystem.InputRemoting.MessageType type;
        }
        public enum MessageType
        {
            public const UnityEngine.InputSystem.InputRemoting.MessageType ChangeUsages = 7;
            public const UnityEngine.InputSystem.InputRemoting.MessageType Connect = 0;
            public const UnityEngine.InputSystem.InputRemoting.MessageType Disconnect = 1;
            public const UnityEngine.InputSystem.InputRemoting.MessageType NewDevice = 3;
            public const UnityEngine.InputSystem.InputRemoting.MessageType NewEvents = 4;
            public const UnityEngine.InputSystem.InputRemoting.MessageType NewLayout = 2;
            public const UnityEngine.InputSystem.InputRemoting.MessageType RemoveDevice = 5;
            public const UnityEngine.InputSystem.InputRemoting.MessageType RemoveLayout = 6;
            public const UnityEngine.InputSystem.InputRemoting.MessageType StartSending = 8;
            public const UnityEngine.InputSystem.InputRemoting.MessageType StopSending = 9;
            public int value__;
        }
    }

    public class InputSettings : UnityEngine.ScriptableObject
    {
        public bool compensateForScreenOrientation { get; set; }
        public float defaultButtonPressPoint { get; set; }
        public float defaultDeadzoneMax { get; set; }
        public float defaultDeadzoneMin { get; set; }
        public float defaultHoldTime { get; set; }
        public float defaultSlowTapTime { get; set; }
        public float defaultTapTime { get; set; }
        public bool filterNoiseOnCurrent { get; set; }
        public float multiTapDelayTime { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<string> supportedDevices { get; set; }
        public float tapRadius { get; set; }
        public UnityEngine.InputSystem.InputSettings.UpdateMode updateMode { get; set; }
        public InputSettings() {}
        public enum UpdateMode
        {
            public const UnityEngine.InputSystem.InputSettings.UpdateMode ProcessEventsInDynamicUpdate = 1;
            public const UnityEngine.InputSystem.InputSettings.UpdateMode ProcessEventsInFixedUpdate = 2;
            public const UnityEngine.InputSystem.InputSettings.UpdateMode ProcessEventsManually = 3;
            public int value__;
        }
    }

    [UnityEditor.InitializeOnLoad] public static class InputSystem
    {
        public static event System.Action<object, UnityEngine.InputSystem.InputActionChange> onActionChange;
        public static event System.Action onAfterUpdate;
        public static event System.Action onBeforeUpdate;
        public static event System.Action<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.InputDeviceChange> onDeviceChange;
        public static event UnityEngine.InputSystem.LowLevel.InputDeviceCommandDelegate onDeviceCommand;
        public static event System.Action<UnityEngine.InputSystem.LowLevel.InputEventPtr, UnityEngine.InputSystem.InputDevice> onEvent;
        public static event UnityEngine.InputSystem.Layouts.InputDeviceFindControlLayoutDelegate onFindLayoutForDevice;
        public static event System.Action<string, UnityEngine.InputSystem.InputControlLayoutChange> onLayoutChange;
        public static event System.Action onSettingsChange;
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputDevice> devices { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputDevice> disconnectedDevices { get; }
        public static UnityEngine.InputSystem.LowLevel.InputMetrics metrics { get; }
        public static float pollingFrequency { get; set; }
        public static UnityEngine.InputSystem.InputRemoting remoting { get; }
        public static UnityEngine.InputSystem.InputSettings settings { get; set; }
        public static System.Version version { get; }
        public static void AddDevice(UnityEngine.InputSystem.InputDevice device);
        public static TDevice AddDevice<TDevice>(string name = default(string)) where TDevice : UnityEngine.InputSystem.InputDevice;
        public static UnityEngine.InputSystem.InputDevice AddDevice(UnityEngine.InputSystem.Layouts.InputDeviceDescription description);
        public static UnityEngine.InputSystem.InputDevice AddDevice(string layout, string name = default(string), string variants = default(string));
        public static void AddDeviceUsage(UnityEngine.InputSystem.InputDevice device, string usage);
        public static void AddDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage);
        public static void DisableAllEnabledActions();
        public static void DisableDevice(UnityEngine.InputSystem.InputDevice device);
        public static void EnableDevice(UnityEngine.InputSystem.InputDevice device);
        public static UnityEngine.InputSystem.InputControl FindControl(string path);
        public static UnityEngine.InputSystem.InputControlList<TControl> FindControls<TControl>(string path) where TControl : UnityEngine.InputSystem.InputControl;
        public static UnityEngine.InputSystem.InputControlList<UnityEngine.InputSystem.InputControl> FindControls(string path);
        public static int FindControls<TControl>(string path, ref UnityEngine.InputSystem.InputControlList<TControl> controls) where TControl : UnityEngine.InputSystem.InputControl;
        public static void FlushDisconnectedDevices();
        public static TDevice GetDevice<TDevice>() where TDevice : UnityEngine.InputSystem.InputDevice;
        public static TDevice GetDevice<TDevice>(string usage) where TDevice : UnityEngine.InputSystem.InputDevice;
        public static TDevice GetDevice<TDevice>(UnityEngine.InputSystem.Utilities.InternedString usage) where TDevice : UnityEngine.InputSystem.InputDevice;
        public static UnityEngine.InputSystem.InputDevice GetDevice(string nameOrLayout);
        public static UnityEngine.InputSystem.InputDevice GetDeviceById(int deviceId);
        public static string GetNameOfBaseLayout(string layoutName);
        public static System.Collections.Generic.List<UnityEngine.InputSystem.Layouts.InputDeviceDescription> GetUnsupportedDevices();
        public static int GetUnsupportedDevices(System.Collections.Generic.List<UnityEngine.InputSystem.Layouts.InputDeviceDescription> descriptions);
        public static bool IsFirstLayoutBasedOnSecond(string firstLayoutName, string secondLayoutName);
        public static System.Collections.Generic.List<UnityEngine.InputSystem.InputAction> ListEnabledActions();
        public static int ListEnabledActions(System.Collections.Generic.List<UnityEngine.InputSystem.InputAction> actions);
        public static System.Collections.Generic.IEnumerable<string> ListInteractions();
        public static System.Collections.Generic.IEnumerable<string> ListLayouts();
        public static System.Collections.Generic.IEnumerable<string> ListLayoutsBasedOn(string baseLayout);
        public static System.Collections.Generic.IEnumerable<string> ListProcessors();
        public static UnityEngine.InputSystem.Layouts.InputControlLayout LoadLayout<TControl>() where TControl : UnityEngine.InputSystem.InputControl;
        public static UnityEngine.InputSystem.Layouts.InputControlLayout LoadLayout(string name);
        public static void PauseHaptics();
        public static void QueueConfigChangeEvent(UnityEngine.InputSystem.InputDevice device, double time = -1);
        public static void QueueDeltaStateEvent<TDelta>(UnityEngine.InputSystem.InputControl control, TDelta delta, double time = -1) where TDelta : System.ValueType, new();
        public static void QueueEvent<TEvent>(ref TEvent inputEvent) where TEvent : System.ValueType, UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo, new();
        public static void QueueEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
        public static void QueueStateEvent<TState>(UnityEngine.InputSystem.InputDevice device, TState state, double time = -1) where TState : System.ValueType, UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo, new();
        public static void QueueTextEvent(UnityEngine.InputSystem.InputDevice device, char character, double time = -1);
        public static void RegisterBindingComposite<T>(string name = default(string));
        public static void RegisterBindingComposite(System.Type type, string name);
        public static void RegisterInteraction<T>(string name = default(string));
        public static void RegisterInteraction(System.Type type, string name = default(string));
        public static void RegisterLayout<T>(string name = default(string), System.Nullable<UnityEngine.InputSystem.Layouts.InputDeviceMatcher> matches = default(System.Nullable<UnityEngine.InputSystem.Layouts.InputDeviceMatcher>)) where T : UnityEngine.InputSystem.InputControl;
        public static void RegisterLayout(string json, string name = default(string), System.Nullable<UnityEngine.InputSystem.Layouts.InputDeviceMatcher> matches = default(System.Nullable<UnityEngine.InputSystem.Layouts.InputDeviceMatcher>));
        public static void RegisterLayout(System.Type type, string name = default(string), System.Nullable<UnityEngine.InputSystem.Layouts.InputDeviceMatcher> matches = default(System.Nullable<UnityEngine.InputSystem.Layouts.InputDeviceMatcher>));
        public static void RegisterLayoutBuilder(System.Func<UnityEngine.InputSystem.Layouts.InputControlLayout> buildMethod, string name, string baseLayout = default(string), System.Nullable<UnityEngine.InputSystem.Layouts.InputDeviceMatcher> matches = default(System.Nullable<UnityEngine.InputSystem.Layouts.InputDeviceMatcher>));
        public static void RegisterLayoutMatcher<TDevice>(UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher) where TDevice : UnityEngine.InputSystem.InputDevice;
        public static void RegisterLayoutMatcher(string layoutName, UnityEngine.InputSystem.Layouts.InputDeviceMatcher matcher);
        public static void RegisterLayoutOverride(string json, string name = default(string));
        public static void RegisterProcessor<T>(string name = default(string));
        public static void RegisterProcessor(System.Type type, string name = default(string));
        public static void RemoveDevice(UnityEngine.InputSystem.InputDevice device);
        public static void RemoveDeviceUsage(UnityEngine.InputSystem.InputDevice device, string usage);
        public static void RemoveDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage);
        public static void RemoveLayout(string name);
        public static void ResetHaptics();
        public static void ResumeHaptics();
        public static void SetDeviceUsage(UnityEngine.InputSystem.InputDevice device, string usage);
        public static void SetDeviceUsage(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Utilities.InternedString usage);
        public static string TryFindMatchingLayout(UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription);
        public static System.Type TryGetBindingComposite(string name);
        public static System.Type TryGetInteraction(string name);
        public static System.Type TryGetProcessor(string name);
        public static bool TryResetDevice(UnityEngine.InputSystem.InputDevice device);
        public static bool TrySyncDevice(UnityEngine.InputSystem.InputDevice device);
        public static void Update();
    }

    [System.Diagnostics.DebuggerDisplay(@"Value = {Get()}")] public class InputValue
    {
        public bool isPressed { get; }
        public InputValue() {}
        public object Get();
        public TValue Get<TValue>() where TValue : System.ValueType, new();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(UnityEngine.InputSystem.LowLevel.JoystickState))] [UnityEngine.Scripting.Preserve] public class Joystick : UnityEngine.InputSystem.InputDevice
    {
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Joystick> all { get; }
        public static UnityEngine.InputSystem.Joystick current { get; }
        public UnityEngine.InputSystem.Controls.Vector2Control hatswitch { get; }
        public UnityEngine.InputSystem.Controls.StickControl stick { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl trigger { get; }
        public UnityEngine.InputSystem.Controls.AxisControl twist { get; }
        public Joystick() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnAdded();
        protected virtual void OnRemoved();
    }

    public enum Key
    {
        public const UnityEngine.InputSystem.Key A = 15;
        public const UnityEngine.InputSystem.Key AltGr = 54;
        public const UnityEngine.InputSystem.Key B = 16;
        public const UnityEngine.InputSystem.Key Backquote = 4;
        public const UnityEngine.InputSystem.Key Backslash = 10;
        public const UnityEngine.InputSystem.Key Backspace = 65;
        public const UnityEngine.InputSystem.Key C = 17;
        public const UnityEngine.InputSystem.Key CapsLock = 72;
        public const UnityEngine.InputSystem.Key Comma = 7;
        public const UnityEngine.InputSystem.Key ContextMenu = 59;
        public const UnityEngine.InputSystem.Key D = 18;
        public const UnityEngine.InputSystem.Key Delete = 71;
        public const UnityEngine.InputSystem.Key Digit0 = 50;
        public const UnityEngine.InputSystem.Key Digit1 = 41;
        public const UnityEngine.InputSystem.Key Digit2 = 42;
        public const UnityEngine.InputSystem.Key Digit3 = 43;
        public const UnityEngine.InputSystem.Key Digit4 = 44;
        public const UnityEngine.InputSystem.Key Digit5 = 45;
        public const UnityEngine.InputSystem.Key Digit6 = 46;
        public const UnityEngine.InputSystem.Key Digit7 = 47;
        public const UnityEngine.InputSystem.Key Digit8 = 48;
        public const UnityEngine.InputSystem.Key Digit9 = 49;
        public const UnityEngine.InputSystem.Key DownArrow = 64;
        public const UnityEngine.InputSystem.Key E = 19;
        public const UnityEngine.InputSystem.Key End = 69;
        public const UnityEngine.InputSystem.Key Enter = 2;
        public const UnityEngine.InputSystem.Key Equals = 14;
        public const UnityEngine.InputSystem.Key Escape = 60;
        public const UnityEngine.InputSystem.Key F = 20;
        public const UnityEngine.InputSystem.Key F1 = 94;
        public const UnityEngine.InputSystem.Key F10 = 103;
        public const UnityEngine.InputSystem.Key F11 = 104;
        public const UnityEngine.InputSystem.Key F12 = 105;
        public const UnityEngine.InputSystem.Key F2 = 95;
        public const UnityEngine.InputSystem.Key F3 = 96;
        public const UnityEngine.InputSystem.Key F4 = 97;
        public const UnityEngine.InputSystem.Key F5 = 98;
        public const UnityEngine.InputSystem.Key F6 = 99;
        public const UnityEngine.InputSystem.Key F7 = 100;
        public const UnityEngine.InputSystem.Key F8 = 101;
        public const UnityEngine.InputSystem.Key F9 = 102;
        public const UnityEngine.InputSystem.Key G = 21;
        public const UnityEngine.InputSystem.Key H = 22;
        public const UnityEngine.InputSystem.Key Home = 68;
        public const UnityEngine.InputSystem.Key I = 23;
        public const UnityEngine.InputSystem.Key IMESelected = 111;
        public const UnityEngine.InputSystem.Key Insert = 70;
        public const UnityEngine.InputSystem.Key J = 24;
        public const UnityEngine.InputSystem.Key K = 25;
        public const UnityEngine.InputSystem.Key L = 26;
        public const UnityEngine.InputSystem.Key LeftAlt = 53;
        public const UnityEngine.InputSystem.Key LeftApple = 57;
        public const UnityEngine.InputSystem.Key LeftArrow = 61;
        public const UnityEngine.InputSystem.Key LeftBracket = 11;
        public const UnityEngine.InputSystem.Key LeftCommand = 57;
        public const UnityEngine.InputSystem.Key LeftCtrl = 55;
        public const UnityEngine.InputSystem.Key LeftMeta = 57;
        public const UnityEngine.InputSystem.Key LeftShift = 51;
        public const UnityEngine.InputSystem.Key LeftWindows = 57;
        public const UnityEngine.InputSystem.Key M = 27;
        public const UnityEngine.InputSystem.Key Minus = 13;
        public const UnityEngine.InputSystem.Key N = 28;
        public const UnityEngine.InputSystem.Key None = 0;
        public const UnityEngine.InputSystem.Key NumLock = 73;
        public const UnityEngine.InputSystem.Key Numpad0 = 84;
        public const UnityEngine.InputSystem.Key Numpad1 = 85;
        public const UnityEngine.InputSystem.Key Numpad2 = 86;
        public const UnityEngine.InputSystem.Key Numpad3 = 87;
        public const UnityEngine.InputSystem.Key Numpad4 = 88;
        public const UnityEngine.InputSystem.Key Numpad5 = 89;
        public const UnityEngine.InputSystem.Key Numpad6 = 90;
        public const UnityEngine.InputSystem.Key Numpad7 = 91;
        public const UnityEngine.InputSystem.Key Numpad8 = 92;
        public const UnityEngine.InputSystem.Key Numpad9 = 93;
        public const UnityEngine.InputSystem.Key NumpadDivide = 78;
        public const UnityEngine.InputSystem.Key NumpadEnter = 77;
        public const UnityEngine.InputSystem.Key NumpadEquals = 83;
        public const UnityEngine.InputSystem.Key NumpadMinus = 81;
        public const UnityEngine.InputSystem.Key NumpadMultiply = 79;
        public const UnityEngine.InputSystem.Key NumpadPeriod = 82;
        public const UnityEngine.InputSystem.Key NumpadPlus = 80;
        public const UnityEngine.InputSystem.Key O = 29;
        public const UnityEngine.InputSystem.Key OEM1 = 106;
        public const UnityEngine.InputSystem.Key OEM2 = 107;
        public const UnityEngine.InputSystem.Key OEM3 = 108;
        public const UnityEngine.InputSystem.Key OEM4 = 109;
        public const UnityEngine.InputSystem.Key OEM5 = 110;
        public const UnityEngine.InputSystem.Key P = 30;
        public const UnityEngine.InputSystem.Key PageDown = 66;
        public const UnityEngine.InputSystem.Key PageUp = 67;
        public const UnityEngine.InputSystem.Key Pause = 76;
        public const UnityEngine.InputSystem.Key Period = 8;
        public const UnityEngine.InputSystem.Key PrintScreen = 74;
        public const UnityEngine.InputSystem.Key Q = 31;
        public const UnityEngine.InputSystem.Key Quote = 5;
        public const UnityEngine.InputSystem.Key R = 32;
        public const UnityEngine.InputSystem.Key RightAlt = 54;
        public const UnityEngine.InputSystem.Key RightApple = 58;
        public const UnityEngine.InputSystem.Key RightArrow = 62;
        public const UnityEngine.InputSystem.Key RightBracket = 12;
        public const UnityEngine.InputSystem.Key RightCommand = 58;
        public const UnityEngine.InputSystem.Key RightCtrl = 56;
        public const UnityEngine.InputSystem.Key RightMeta = 58;
        public const UnityEngine.InputSystem.Key RightShift = 52;
        public const UnityEngine.InputSystem.Key RightWindows = 58;
        public const UnityEngine.InputSystem.Key S = 33;
        public const UnityEngine.InputSystem.Key ScrollLock = 75;
        public const UnityEngine.InputSystem.Key Semicolon = 6;
        public const UnityEngine.InputSystem.Key Slash = 9;
        public const UnityEngine.InputSystem.Key Space = 1;
        public const UnityEngine.InputSystem.Key T = 34;
        public const UnityEngine.InputSystem.Key Tab = 3;
        public const UnityEngine.InputSystem.Key U = 35;
        public const UnityEngine.InputSystem.Key UpArrow = 63;
        public const UnityEngine.InputSystem.Key V = 36;
        public int value__;
        public const UnityEngine.InputSystem.Key W = 37;
        public const UnityEngine.InputSystem.Key X = 38;
        public const UnityEngine.InputSystem.Key Y = 39;
        public const UnityEngine.InputSystem.Key Z = 40;
    }

    [System.Reflection.DefaultMember(@"Item")] [UnityEngine.InputSystem.Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(UnityEngine.InputSystem.LowLevel.KeyboardState))] [UnityEngine.Scripting.Preserve] public class Keyboard : UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.LowLevel.ITextInputReceiver
    {
        public const int KeyCount = 110;
        public event System.Action<UnityEngine.InputSystem.LowLevel.IMECompositionString> onIMECompositionChange;
        public event System.Action<char> onTextInput;
        public UnityEngine.InputSystem.Controls.KeyControl aKey { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Controls.KeyControl> allKeys { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl altKey { get; }
        public UnityEngine.InputSystem.Controls.AnyKeyControl anyKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl backquoteKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl backslashKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl backspaceKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl bKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl capsLockKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl cKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl commaKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl contextMenuKey { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl ctrlKey { get; }
        public static UnityEngine.InputSystem.Keyboard current { get; }
        public UnityEngine.InputSystem.Controls.KeyControl deleteKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit0Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit1Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit2Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit3Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit4Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit5Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit6Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit7Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit8Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl digit9Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl dKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl downArrowKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl eKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl endKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl enterKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl equalsKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl escapeKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f10Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f11Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f12Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f1Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f2Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f3Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f4Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f5Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f6Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f7Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f8Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl f9Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl fKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl gKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl hKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl homeKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl iKey { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl imeSelected { get; }
        public UnityEngine.InputSystem.Controls.KeyControl insertKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl this[UnityEngine.InputSystem.Key key] { get; }
        public UnityEngine.InputSystem.Controls.KeyControl jKey { get; }
        public string keyboardLayout { get; protected set; }
        public UnityEngine.InputSystem.Controls.KeyControl kKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl leftAltKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl leftAppleKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl leftArrowKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl leftBracketKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl leftCommandKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl leftCtrlKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl leftMetaKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl leftShiftKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl leftWindowsKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl lKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl minusKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl mKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl nKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numLockKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad0Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad1Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad2Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad3Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad4Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad5Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad6Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad7Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad8Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpad9Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpadDivideKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpadEnterKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpadEqualsKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpadMinusKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpadMultiplyKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpadPeriodKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl numpadPlusKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl oem1Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl oem2Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl oem3Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl oem4Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl oem5Key { get; }
        public UnityEngine.InputSystem.Controls.KeyControl oKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl pageDownKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl pageUpKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl pauseKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl periodKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl pKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl printScreenKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl qKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl quoteKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rightAltKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rightAppleKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rightArrowKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rightBracketKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rightCommandKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rightCtrlKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rightMetaKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rightShiftKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rightWindowsKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl rKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl scrollLockKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl semicolonKey { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl shiftKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl sKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl slashKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl spaceKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl tabKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl tKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl uKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl upArrowKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl vKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl wKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl xKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl yKey { get; }
        public UnityEngine.InputSystem.Controls.KeyControl zKey { get; }
        public Keyboard() {}
        public UnityEngine.InputSystem.Controls.KeyControl FindKeyOnCurrentKeyboardLayout(string displayName);
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        public virtual void OnIMECompositionChanged(UnityEngine.InputSystem.LowLevel.IMECompositionString compositionString);
        protected virtual void OnRemoved();
        public virtual void OnTextInput(char character);
        protected virtual void RefreshConfiguration();
        public void SetIMECursorPosition(UnityEngine.Vector2 position);
        public void SetIMEEnabled(bool enabled);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Light")] [UnityEngine.Scripting.Preserve] public class LightSensor : UnityEngine.InputSystem.Sensor
    {
        public static UnityEngine.InputSystem.LightSensor current { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Light Level", noisy = true)] public UnityEngine.InputSystem.Controls.AxisControl lightLevel { get; }
        public LightSensor() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Linear Acceleration", stateType = typeof(UnityEngine.InputSystem.LowLevel.LinearAccelerationState))] [UnityEngine.Scripting.Preserve] public class LinearAccelerationSensor : UnityEngine.InputSystem.Sensor
    {
        public UnityEngine.InputSystem.Controls.Vector3Control acceleration { get; }
        public static UnityEngine.InputSystem.LinearAccelerationSensor current { get; }
        public LinearAccelerationSensor() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Magnetic Field")] [UnityEngine.Scripting.Preserve] public class MagneticFieldSensor : UnityEngine.InputSystem.Sensor
    {
        public static UnityEngine.InputSystem.MagneticFieldSensor current { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Magnetic Field", noisy = true)] public UnityEngine.InputSystem.Controls.Vector3Control magneticField { get; }
        public MagneticFieldSensor() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(UnityEngine.InputSystem.LowLevel.MouseState))] [UnityEngine.Scripting.Preserve] public class Mouse : UnityEngine.InputSystem.Pointer, UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver
    {
        public UnityEngine.InputSystem.Controls.ButtonControl backButton { get; }
        public UnityEngine.InputSystem.Controls.IntegerControl clickCount { get; }
        public static UnityEngine.InputSystem.Mouse current { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl forwardButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl leftButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl middleButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl rightButton { get; }
        public UnityEngine.InputSystem.Controls.Vector2Control scroll { get; }
        public Mouse() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnAdded();
        protected void OnNextUpdate();
        protected virtual void OnRemoved();
        protected void OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
        public void WarpCursorPosition(UnityEngine.Vector2 position);
    }

    [System.Reflection.DefaultMember(@"Item")] [UnityEngine.InputSystem.Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(UnityEngine.InputSystem.LowLevel.PenState))] [UnityEngine.Scripting.Preserve] public class Pen : UnityEngine.InputSystem.Pointer
    {
        public static UnityEngine.InputSystem.Pen current { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl eraser { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl firstBarrelButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl fourthBarrelButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl inRange { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl this[UnityEngine.InputSystem.PenButton button] { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl secondBarrelButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl thirdBarrelButton { get; }
        public UnityEngine.InputSystem.Controls.Vector2Control tilt { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl tip { get; }
        public UnityEngine.InputSystem.Controls.AxisControl twist { get; }
        public Pen() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    public enum PenButton
    {
        public const UnityEngine.InputSystem.PenButton Barrel1 = 2;
        public const UnityEngine.InputSystem.PenButton Barrel2 = 3;
        public const UnityEngine.InputSystem.PenButton Barrel3 = 5;
        public const UnityEngine.InputSystem.PenButton Barrel4 = 6;
        public const UnityEngine.InputSystem.PenButton BarrelFirst = 2;
        public const UnityEngine.InputSystem.PenButton BarrelFourth = 6;
        public const UnityEngine.InputSystem.PenButton BarrelSecond = 3;
        public const UnityEngine.InputSystem.PenButton BarrelThird = 5;
        public const UnityEngine.InputSystem.PenButton Eraser = 1;
        public const UnityEngine.InputSystem.PenButton InRange = 4;
        public const UnityEngine.InputSystem.PenButton Tip = 0;
        public int value__;
    }

    [UnityEngine.AddComponentMenu(@"Input/Player Input")] [UnityEngine.DisallowMultipleComponent] public class PlayerInput : UnityEngine.MonoBehaviour
    {
        public const string ControlsChangedMessage = OnControlsChanged;
        public const string DeviceLostMessage = OnDeviceLost;
        public const string DeviceRegainedMessage = OnDeviceRegained;
        public event System.Action<UnityEngine.InputSystem.InputAction.CallbackContext> onActionTriggered;
        public event System.Action<UnityEngine.InputSystem.PlayerInput> onControlsChanged;
        public event System.Action<UnityEngine.InputSystem.PlayerInput> onDeviceLost;
        public event System.Action<UnityEngine.InputSystem.PlayerInput> onDeviceRegained;
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.PlayerInput.ActionEvent> actionEvents { get; set; }
        public UnityEngine.InputSystem.InputActionAsset actions { get; set; }
        [System.Obsolete(@"Use inputIsActive instead.")] public bool active { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.PlayerInput> all { get; }
        public UnityEngine.Camera camera { get; set; }
        public UnityEngine.InputSystem.PlayerInput.ControlsChangedEvent controlsChangedEvent { get; }
        public UnityEngine.InputSystem.InputActionMap currentActionMap { get; set; }
        public string currentControlScheme { get; }
        public string defaultActionMap { get; set; }
        public string defaultControlScheme { get; set; }
        public UnityEngine.InputSystem.PlayerInput.DeviceLostEvent deviceLostEvent { get; }
        public UnityEngine.InputSystem.PlayerInput.DeviceRegainedEvent deviceRegainedEvent { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputDevice> devices { get; }
        public bool hasMissingRequiredDevices { get; }
        public bool inputIsActive { get; }
        public static bool isSinglePlayer { get; }
        public bool neverAutoSwitchControlSchemes { get; set; }
        public UnityEngine.InputSystem.PlayerNotifications notificationBehavior { get; set; }
        public int playerIndex { get; }
        public int splitScreenIndex { get; }
        public UnityEngine.InputSystem.UI.InputSystemUIInputModule uiInputModule { get; set; }
        public UnityEngine.InputSystem.Users.InputUser user { get; }
        public PlayerInput() {}
        public void ActivateInput();
        public void DeactivateInput();
        public void DebugLogAction(UnityEngine.InputSystem.InputAction.CallbackContext context);
        public static UnityEngine.InputSystem.PlayerInput FindFirstPairedToDevice(UnityEngine.InputSystem.InputDevice device);
        public static UnityEngine.InputSystem.PlayerInput GetPlayerByIndex(int playerIndex);
        public static UnityEngine.InputSystem.PlayerInput Instantiate(UnityEngine.GameObject prefab, int playerIndex = -1, string controlScheme = default(string), int splitScreenIndex = -1, UnityEngine.InputSystem.InputDevice pairWithDevice = default(UnityEngine.InputSystem.InputDevice));
        public static UnityEngine.InputSystem.PlayerInput Instantiate(UnityEngine.GameObject prefab, int playerIndex = -1, string controlScheme = default(string), int splitScreenIndex = -1, params UnityEngine.InputSystem.InputDevice[] pairWithDevices);
        [System.Obsolete(@"Use DeactivateInput instead.")] public void PassivateInput();
        public void SwitchCurrentActionMap(string mapNameOrId);
        public bool SwitchCurrentControlScheme(params UnityEngine.InputSystem.InputDevice[] devices);
        public void SwitchCurrentControlScheme(string controlScheme, params UnityEngine.InputSystem.InputDevice[] devices);
        public class ActionEvent : UnityEngine.Events.UnityEvent<UnityEngine.InputSystem.InputAction.CallbackContext>
        {
            public string actionId { get; }
            public string actionName { get; }
            public ActionEvent() {}
            public ActionEvent(UnityEngine.InputSystem.InputAction action) {}
            public ActionEvent(System.Guid actionGUID, string name = default(string)) {}
        }
        public class ControlsChangedEvent : UnityEngine.Events.UnityEvent<UnityEngine.InputSystem.PlayerInput>
        {
            public ControlsChangedEvent() {}
        }
        public class DeviceLostEvent : UnityEngine.Events.UnityEvent<UnityEngine.InputSystem.PlayerInput>
        {
            public DeviceLostEvent() {}
        }
        public class DeviceRegainedEvent : UnityEngine.Events.UnityEvent<UnityEngine.InputSystem.PlayerInput>
        {
            public DeviceRegainedEvent() {}
        }
    }

    [UnityEngine.AddComponentMenu(@"Input/Player Input Manager")] public class PlayerInputManager : UnityEngine.MonoBehaviour
    {
        public const string PlayerJoinedMessage = OnPlayerJoined;
        public const string PlayerLeftMessage = OnPlayerLeft;
        public event System.Action<UnityEngine.InputSystem.PlayerInput> onPlayerJoined;
        public event System.Action<UnityEngine.InputSystem.PlayerInput> onPlayerLeft;
        public int fixedNumberOfSplitScreens { get; }
        public static UnityEngine.InputSystem.PlayerInputManager instance { get; }
        public UnityEngine.InputSystem.InputActionProperty joinAction { get; set; }
        public UnityEngine.InputSystem.PlayerJoinBehavior joinBehavior { get; set; }
        public bool joiningEnabled { get; }
        public bool maintainAspectRatioInSplitScreen { get; }
        public int maxPlayerCount { get; }
        public UnityEngine.InputSystem.PlayerNotifications notificationBehavior { get; set; }
        public int playerCount { get; }
        public UnityEngine.InputSystem.PlayerInputManager.PlayerJoinedEvent playerJoinedEvent { get; }
        public UnityEngine.InputSystem.PlayerInputManager.PlayerLeftEvent playerLeftEvent { get; }
        public UnityEngine.GameObject playerPrefab { get; set; }
        public bool splitScreen { get; set; }
        public UnityEngine.Rect splitScreenArea { get; }
        public PlayerInputManager() {}
        public void DisableJoining();
        public void EnableJoining();
        public UnityEngine.InputSystem.PlayerInput JoinPlayer(int playerIndex = -1, int splitScreenIndex = -1, string controlScheme = default(string), UnityEngine.InputSystem.InputDevice pairWithDevice = default(UnityEngine.InputSystem.InputDevice));
        public UnityEngine.InputSystem.PlayerInput JoinPlayer(int playerIndex = -1, int splitScreenIndex = -1, string controlScheme = default(string), params UnityEngine.InputSystem.InputDevice[] pairWithDevices);
        public void JoinPlayerFromAction(UnityEngine.InputSystem.InputAction.CallbackContext context);
        public void JoinPlayerFromActionIfNotAlreadyJoined(UnityEngine.InputSystem.InputAction.CallbackContext context);
        public class PlayerJoinedEvent : UnityEngine.Events.UnityEvent<UnityEngine.InputSystem.PlayerInput>
        {
            public PlayerJoinedEvent() {}
        }
        public class PlayerLeftEvent : UnityEngine.Events.UnityEvent<UnityEngine.InputSystem.PlayerInput>
        {
            public PlayerLeftEvent() {}
        }
    }

    public enum PlayerJoinBehavior
    {
        public const UnityEngine.InputSystem.PlayerJoinBehavior JoinPlayersManually = 2;
        public const UnityEngine.InputSystem.PlayerJoinBehavior JoinPlayersWhenButtonIsPressed = 0;
        public const UnityEngine.InputSystem.PlayerJoinBehavior JoinPlayersWhenJoinActionIsTriggered = 1;
        public int value__;
    }

    public enum PlayerNotifications
    {
        public const UnityEngine.InputSystem.PlayerNotifications BroadcastMessages = 1;
        public const UnityEngine.InputSystem.PlayerNotifications InvokeCSharpEvents = 3;
        public const UnityEngine.InputSystem.PlayerNotifications InvokeUnityEvents = 2;
        public const UnityEngine.InputSystem.PlayerNotifications SendMessages = 0;
        public int value__;
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(UnityEngine.InputSystem.LowLevel.PointerState))] [UnityEngine.Scripting.Preserve] public class Pointer : UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver
    {
        public static UnityEngine.InputSystem.Pointer current { get; }
        public UnityEngine.InputSystem.Controls.Vector2Control delta { get; }
        public UnityEngine.InputSystem.Controls.Vector2Control position { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl press { get; }
        public UnityEngine.InputSystem.Controls.AxisControl pressure { get; }
        public UnityEngine.InputSystem.Controls.Vector2Control radius { get; }
        public Pointer() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected void OnNextUpdate();
        protected virtual void OnRemoved();
        protected void OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Pressure")] [UnityEngine.Scripting.Preserve] public class PressureSensor : UnityEngine.InputSystem.Sensor
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Atmospheric Pressure", noisy = true)] public UnityEngine.InputSystem.Controls.AxisControl atmosphericPressure { get; }
        public static UnityEngine.InputSystem.PressureSensor current { get; }
        public PressureSensor() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Proximity")] [UnityEngine.Scripting.Preserve] public class ProximitySensor : UnityEngine.InputSystem.Sensor
    {
        public static UnityEngine.InputSystem.ProximitySensor current { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Distance", noisy = true)] public UnityEngine.InputSystem.Controls.AxisControl distance { get; }
        public ProximitySensor() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(isGenericTypeOfDevice = true)] [UnityEngine.Scripting.Preserve] public class Sensor : UnityEngine.InputSystem.InputDevice
    {
        public float samplingFrequency { get; set; }
        public Sensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Step Counter")] [UnityEngine.Scripting.Preserve] public class StepCounter : UnityEngine.InputSystem.Sensor
    {
        public static UnityEngine.InputSystem.StepCounter current { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Step Counter", noisy = true)] public UnityEngine.InputSystem.Controls.IntegerControl stepCounter { get; }
        public StepCounter() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
    }

    public enum TouchPhase
    {
        public const UnityEngine.InputSystem.TouchPhase Began = 1;
        public const UnityEngine.InputSystem.TouchPhase Canceled = 4;
        public const UnityEngine.InputSystem.TouchPhase Ended = 3;
        public const UnityEngine.InputSystem.TouchPhase Moved = 2;
        public const UnityEngine.InputSystem.TouchPhase None = 0;
        public const UnityEngine.InputSystem.TouchPhase Stationary = 5;
        public int value__;
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(isGenericTypeOfDevice = true, stateType = typeof(UnityEngine.InputSystem.LowLevel.TouchscreenState))] [UnityEngine.Scripting.Preserve] public class Touchscreen : UnityEngine.InputSystem.Pointer, UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver
    {
        public static UnityEngine.InputSystem.Touchscreen current { get; }
        public UnityEngine.InputSystem.Controls.TouchControl primaryTouch { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Controls.TouchControl> touches { get; }
        public Touchscreen() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected void OnNextUpdate();
        protected virtual void OnRemoved();
        protected void OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Tracked Device", isGenericTypeOfDevice = true)] [UnityEngine.Scripting.Preserve] public class TrackedDevice : UnityEngine.InputSystem.InputDevice
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control devicePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl deviceRotation { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl isTracked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.IntegerControl trackingState { get; }
        public TrackedDevice() {}
        protected virtual void FinishSetup();
    }
}

namespace UnityEngine.InputSystem.Android
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"Accelerometer")] [UnityEngine.Scripting.Preserve] public class AndroidAccelerometer : UnityEngine.InputSystem.Accelerometer
    {
        public AndroidAccelerometer() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"AmbientTemperature")] [UnityEngine.Scripting.Preserve] public class AndroidAmbientTemperature : UnityEngine.InputSystem.AmbientTemperatureSensor
    {
        public AndroidAmbientTemperature() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState), variants = @"Gamepad")] [UnityEngine.Scripting.Preserve] public class AndroidGamepad : UnityEngine.InputSystem.Gamepad
    {
        public AndroidGamepad() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"Gravity")] [UnityEngine.Scripting.Preserve] public class AndroidGravitySensor : UnityEngine.InputSystem.GravitySensor
    {
        public AndroidGravitySensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"Gyroscope")] [UnityEngine.Scripting.Preserve] public class AndroidGyroscope : UnityEngine.InputSystem.Gyroscope
    {
        public AndroidGyroscope() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidGameControllerState), variants = @"Joystick")] [UnityEngine.Scripting.Preserve] public class AndroidJoystick : UnityEngine.InputSystem.Joystick
    {
        public AndroidJoystick() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"Light")] [UnityEngine.Scripting.Preserve] public class AndroidLightSensor : UnityEngine.InputSystem.LightSensor
    {
        public AndroidLightSensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"LinearAcceleration")] [UnityEngine.Scripting.Preserve] public class AndroidLinearAccelerationSensor : UnityEngine.InputSystem.LinearAccelerationSensor
    {
        public AndroidLinearAccelerationSensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"MagneticField")] [UnityEngine.Scripting.Preserve] public class AndroidMagneticFieldSensor : UnityEngine.InputSystem.MagneticFieldSensor
    {
        public AndroidMagneticFieldSensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"Pressure")] [UnityEngine.Scripting.Preserve] public class AndroidPressureSensor : UnityEngine.InputSystem.PressureSensor
    {
        public AndroidPressureSensor() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"Proximity")] [UnityEngine.Scripting.Preserve] public class AndroidProximity : UnityEngine.InputSystem.ProximitySensor
    {
        public AndroidProximity() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"RelativeHumidity")] [UnityEngine.Scripting.Preserve] public class AndroidRelativeHumidity : UnityEngine.InputSystem.HumiditySensor
    {
        public AndroidRelativeHumidity() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"RotationVector")] [UnityEngine.Scripting.Preserve] public class AndroidRotationVector : UnityEngine.InputSystem.AttitudeSensor
    {
        public AndroidRotationVector() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.Android.LowLevel.AndroidSensorState), variants = @"StepCounter")] [UnityEngine.Scripting.Preserve] public class AndroidStepCounter : UnityEngine.InputSystem.StepCounter
    {
        public AndroidStepCounter() {}
    }
}

namespace UnityEngine.InputSystem.Composites
{
    [UnityEngine.InputSystem.Utilities.DisplayStringFormat(@"{negative}/{positive}")] [UnityEngine.Scripting.Preserve] public class AxisComposite : UnityEngine.InputSystem.InputBindingComposite<float>
    {
        [UnityEngine.Tooltip(@"Value to return when the positive side is fully actuated.")] public float maxValue;
        [UnityEngine.Tooltip(@"Value to return when the negative side is fully actuated.")] public float minValue;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int negative;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int positive;
        [UnityEngine.Tooltip(@"If both the positive and negative side are actuated, decides what value to return. 'Neither' (default) means that the resulting value is the midpoint between min and max. 'Positive' means that max will be returned. 'Negative' means that min will be returned.")] public UnityEngine.InputSystem.Composites.AxisComposite.WhichSideWins whichSideWins;
        public float midPoint { get; }
        public AxisComposite() {}
        public virtual float EvaluateMagnitude(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
        public virtual float ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
        public enum WhichSideWins
        {
            public const UnityEngine.InputSystem.Composites.AxisComposite.WhichSideWins Negative = 2;
            public const UnityEngine.InputSystem.Composites.AxisComposite.WhichSideWins Neither = 0;
            public const UnityEngine.InputSystem.Composites.AxisComposite.WhichSideWins Positive = 1;
            public int value__;
        }
    }

    [UnityEngine.InputSystem.Utilities.DisplayStringFormat(@"{modifier}+{button}")] [UnityEngine.Scripting.Preserve] public class ButtonWithOneModifier : UnityEngine.InputSystem.InputBindingComposite<float>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int button;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int modifier;
        public ButtonWithOneModifier() {}
        public virtual float EvaluateMagnitude(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
        public virtual float ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
    }

    [UnityEngine.InputSystem.Utilities.DisplayStringFormat(@"{modifier1}+{modifier2}+{button}")] [UnityEngine.Scripting.Preserve] public class ButtonWithTwoModifiers : UnityEngine.InputSystem.InputBindingComposite<float>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int button;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int modifier1;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int modifier2;
        public ButtonWithTwoModifiers() {}
        public virtual float EvaluateMagnitude(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
        public virtual float ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
    }

    [UnityEngine.InputSystem.Utilities.DisplayStringFormat(@"{up}/{left}/{down}/{right}")] [UnityEngine.Scripting.Preserve] public class Vector2Composite : UnityEngine.InputSystem.InputBindingComposite<UnityEngine.Vector2>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int down;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int left;
        public UnityEngine.InputSystem.Composites.Vector2Composite.Mode mode;
        [System.Obsolete(@"Use Mode.DigitalNormalized with 'mode' instead")] public bool normalize;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int right;
        [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Button")] public int up;
        public Vector2Composite() {}
        public virtual float EvaluateMagnitude(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
        public virtual UnityEngine.Vector2 ReadValue(ref UnityEngine.InputSystem.InputBindingCompositeContext context);
        public enum Mode
        {
            public const UnityEngine.InputSystem.Composites.Vector2Composite.Mode Analog = 2;
            public const UnityEngine.InputSystem.Composites.Vector2Composite.Mode Digital = 1;
            public const UnityEngine.InputSystem.Composites.Vector2Composite.Mode DigitalNormalized = 0;
            public int value__;
        }
    }
}

namespace UnityEngine.InputSystem.Controls
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true)] [UnityEngine.Scripting.Preserve] public class AnyKeyControl : UnityEngine.InputSystem.Controls.ButtonControl
    {
        public AnyKeyControl() {}
        public virtual float ReadUnprocessedValueFromState(void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class AxisControl : UnityEngine.InputSystem.InputControl<float>
    {
        public UnityEngine.InputSystem.Controls.AxisControl.Clamp clamp;
        public float clampConstant;
        public float clampMax;
        public float clampMin;
        public bool invert;
        public bool normalize;
        public float normalizeMax;
        public float normalizeMin;
        public float normalizeZero;
        public bool scale;
        public float scaleFactor;
        public AxisControl() {}
        public virtual bool CompareValue(void* firstStatePtr, void* secondStatePtr);
        public virtual float EvaluateMagnitude(void* statePtr);
        protected virtual void FinishSetup();
        protected float Preprocess(float value);
        public virtual float ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(float value, void* statePtr);
        public enum Clamp
        {
            public const UnityEngine.InputSystem.Controls.AxisControl.Clamp AfterNormalize = 2;
            public const UnityEngine.InputSystem.Controls.AxisControl.Clamp BeforeNormalize = 1;
            public const UnityEngine.InputSystem.Controls.AxisControl.Clamp None = 0;
            public const UnityEngine.InputSystem.Controls.AxisControl.Clamp ToConstantBeforeNormalize = 3;
            public int value__;
        }
    }

    [UnityEngine.Scripting.Preserve] public class ButtonControl : UnityEngine.InputSystem.Controls.AxisControl
    {
        public float pressPoint;
        public bool isPressed { get; }
        public float pressPointOrDefault { get; }
        public bool wasPressedThisFrame { get; }
        public bool wasReleasedThisFrame { get; }
        public ButtonControl() {}
        public bool IsValueConsideredPressed(float value);
    }

    [UnityEngine.Scripting.Preserve] public class DiscreteButtonControl : UnityEngine.InputSystem.Controls.ButtonControl
    {
        public int maxValue;
        public int minValue;
        public int nullValue;
        public int wrapAtValue;
        public DiscreteButtonControl() {}
        protected virtual void FinishSetup();
        public virtual float ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(float value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class DoubleControl : UnityEngine.InputSystem.InputControl<double>
    {
        public DoubleControl() {}
        public virtual double ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(double value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class DpadControl : UnityEngine.InputSystem.Controls.Vector2Control
    {
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 1, displayName = @"Down")] public UnityEngine.InputSystem.Controls.ButtonControl down { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 2, displayName = @"Left")] public UnityEngine.InputSystem.Controls.ButtonControl left { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 3, displayName = @"Right")] public UnityEngine.InputSystem.Controls.ButtonControl right { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"Up")] [UnityEngine.InputSystem.Layouts.InputControl(layout = @"DpadAxis", name = @"x", synthetic = true, useStateFrom = @"right")] [UnityEngine.InputSystem.Layouts.InputControl(layout = @"DpadAxis", name = @"y", synthetic = true, useStateFrom = @"up")] public UnityEngine.InputSystem.Controls.ButtonControl up { get; }
        public DpadControl() {}
        protected virtual void FinishSetup();
        public static UnityEngine.Vector2 MakeDpadVector(float up, float down, float left, float right);
        public static UnityEngine.Vector2 MakeDpadVector(bool up, bool down, bool left, bool right, bool normalize = True);
        public virtual UnityEngine.Vector2 ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(UnityEngine.Vector2 value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class IntegerControl : UnityEngine.InputSystem.InputControl<int>
    {
        public IntegerControl() {}
        public virtual int ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(int value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class KeyControl : UnityEngine.InputSystem.Controls.ButtonControl
    {
        public UnityEngine.InputSystem.Key keyCode { get; set; }
        public int scanCode { get; }
        public KeyControl() {}
        protected virtual void RefreshConfiguration();
    }

    [UnityEngine.Scripting.Preserve] public class QuaternionControl : UnityEngine.InputSystem.InputControl<UnityEngine.Quaternion>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"W")] public UnityEngine.InputSystem.Controls.AxisControl w { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"X")] public UnityEngine.InputSystem.Controls.AxisControl x { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Y")] public UnityEngine.InputSystem.Controls.AxisControl y { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Z")] public UnityEngine.InputSystem.Controls.AxisControl z { get; }
        public QuaternionControl() {}
        protected virtual void FinishSetup();
        public virtual UnityEngine.Quaternion ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(UnityEngine.Quaternion value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class StickControl : UnityEngine.InputSystem.Controls.Vector2Control
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Down", parameters = @"clamp=2,clampMin=-1,clampMax=0,invert", processors = @"axisDeadzone", synthetic = true, useStateFrom = @"y")] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl down { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Left", parameters = @"clamp=2,clampMin=-1,clampMax=0,invert", processors = @"axisDeadzone", synthetic = true, useStateFrom = @"x")] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl left { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Right", parameters = @"clamp=2,clampMin=0,clampMax=1", processors = @"axisDeadzone", synthetic = true, useStateFrom = @"x")] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl right { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Up", parameters = @"clamp=2,clampMin=0,clampMax=1", processors = @"axisDeadzone", synthetic = true, useStateFrom = @"y")] [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Axis", maxValue = 1, minValue = -1, name = @"x", processors = @"axisDeadzone")] [UnityEngine.InputSystem.Layouts.InputControl(layout = @"Axis", maxValue = 1, minValue = -1, name = @"y", processors = @"axisDeadzone")] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl up { get; }
        public StickControl() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(stateType = typeof(UnityEngine.InputSystem.LowLevel.TouchState))] [UnityEngine.Scripting.Preserve] public class TouchControl : UnityEngine.InputSystem.InputControl<UnityEngine.InputSystem.LowLevel.TouchState>
    {
        public UnityEngine.InputSystem.Controls.Vector2Control delta { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl indirectTouch { get; }
        public bool isInProgress { get; }
        public UnityEngine.InputSystem.Controls.TouchPhaseControl phase { get; }
        public UnityEngine.InputSystem.Controls.Vector2Control position { get; }
        public UnityEngine.InputSystem.Controls.TouchPressControl press { get; }
        public UnityEngine.InputSystem.Controls.AxisControl pressure { get; }
        public UnityEngine.InputSystem.Controls.Vector2Control radius { get; }
        public UnityEngine.InputSystem.Controls.Vector2Control startPosition { get; }
        public UnityEngine.InputSystem.Controls.DoubleControl startTime { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl tap { get; }
        public UnityEngine.InputSystem.Controls.IntegerControl tapCount { get; }
        public UnityEngine.InputSystem.Controls.IntegerControl touchId { get; }
        public TouchControl() {}
        protected virtual void FinishSetup();
        public virtual UnityEngine.InputSystem.LowLevel.TouchState ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(UnityEngine.InputSystem.LowLevel.TouchState value, void* statePtr);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true)] [UnityEngine.Scripting.Preserve] public class TouchPhaseControl : UnityEngine.InputSystem.InputControl<UnityEngine.InputSystem.TouchPhase>
    {
        public TouchPhaseControl() {}
        public virtual UnityEngine.InputSystem.TouchPhase ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(UnityEngine.InputSystem.TouchPhase value, void* statePtr);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true)] [UnityEngine.Scripting.Preserve] public class TouchPressControl : UnityEngine.InputSystem.Controls.ButtonControl
    {
        public TouchPressControl() {}
        protected virtual void FinishSetup();
        public virtual float ReadUnprocessedValueFromState(void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class Vector2Control : UnityEngine.InputSystem.InputControl<UnityEngine.Vector2>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"X", offset = 0)] public UnityEngine.InputSystem.Controls.AxisControl x { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Y", offset = 4)] public UnityEngine.InputSystem.Controls.AxisControl y { get; }
        public Vector2Control() {}
        public virtual float EvaluateMagnitude(void* statePtr);
        protected virtual void FinishSetup();
        public virtual UnityEngine.Vector2 ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(UnityEngine.Vector2 value, void* statePtr);
    }

    [UnityEngine.Scripting.Preserve] public class Vector3Control : UnityEngine.InputSystem.InputControl<UnityEngine.Vector3>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"X", offset = 0)] public UnityEngine.InputSystem.Controls.AxisControl x { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Y", offset = 4)] public UnityEngine.InputSystem.Controls.AxisControl y { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Z", offset = 8)] public UnityEngine.InputSystem.Controls.AxisControl z { get; }
        public Vector3Control() {}
        public virtual float EvaluateMagnitude(void* statePtr);
        protected virtual void FinishSetup();
        public virtual UnityEngine.Vector3 ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(UnityEngine.Vector3 value, void* statePtr);
    }
}

namespace UnityEngine.InputSystem.DualShock
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.DualShock.LowLevel.DualShock3HIDInputReport))] [UnityEngine.Scripting.Preserve] public class DualShock3GamepadHID : UnityEngine.InputSystem.DualShock.DualShockGamepad
    {
        public UnityEngine.InputSystem.Controls.ButtonControl leftTriggerButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl playStationButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl rightTriggerButton { get; }
        public DualShock3GamepadHID() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.DualShock.LowLevel.DualShock4HIDInputReport))] [UnityEngine.Scripting.Preserve] public class DualShock4GamepadHID : UnityEngine.InputSystem.DualShock.DualShockGamepad
    {
        public UnityEngine.InputSystem.Controls.ButtonControl leftTriggerButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl playStationButton { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl rightTriggerButton { get; }
        public DualShock4GamepadHID() {}
        protected virtual void FinishSetup();
        public virtual void PauseHaptics();
        public virtual void ResetHaptics();
        public virtual void ResumeHaptics();
        public virtual void SetLightBarColor(UnityEngine.Color color);
        public virtual void SetMotorSpeeds(float lowFrequency, float highFrequency);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"PS4 Controller")] [UnityEngine.Scripting.Preserve] public class DualShockGamepad : UnityEngine.InputSystem.Gamepad, UnityEngine.InputSystem.DualShock.IDualShockHaptics, UnityEngine.InputSystem.Haptics.IDualMotorRumble, UnityEngine.InputSystem.Haptics.IHaptics
    {
        public static UnityEngine.InputSystem.DualShock.DualShockGamepad current { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"L1", name = @"leftShoulder", shortDisplayName = @"L1")] public UnityEngine.InputSystem.Controls.ButtonControl L1 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"L2", name = @"leftTrigger", shortDisplayName = @"L2")] public UnityEngine.InputSystem.Controls.ButtonControl L2 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"L3", name = @"leftStickPress", shortDisplayName = @"L3")] public UnityEngine.InputSystem.Controls.ButtonControl L3 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Options", name = @"start")] public UnityEngine.InputSystem.Controls.ButtonControl optionsButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"R1", name = @"rightShoulder", shortDisplayName = @"R1")] public UnityEngine.InputSystem.Controls.ButtonControl R1 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"R2", name = @"rightTrigger", shortDisplayName = @"R2")] public UnityEngine.InputSystem.Controls.ButtonControl R2 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"R3", name = @"rightStickPress", shortDisplayName = @"R3")] public UnityEngine.InputSystem.Controls.ButtonControl R3 { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Share", name = @"select")] public UnityEngine.InputSystem.Controls.ButtonControl shareButton { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Circle", name = @"buttonEast", shortDisplayName = @"Circle")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Cross", name = @"buttonSouth", shortDisplayName = @"Cross")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Square", name = @"buttonWest", shortDisplayName = @"Square")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Triangle", name = @"buttonNorth", shortDisplayName = @"Triangle")] [UnityEngine.InputSystem.Layouts.InputControl] public UnityEngine.InputSystem.Controls.ButtonControl touchpadButton { get; }
        public DualShockGamepad() {}
        protected virtual void FinishSetup();
        public virtual void MakeCurrent();
        protected virtual void OnRemoved();
        public virtual void SetLightBarColor(UnityEngine.Color color);
    }

    public interface IDualShockHaptics : UnityEngine.InputSystem.Haptics.IDualMotorRumble, UnityEngine.InputSystem.Haptics.IHaptics
    {
        public abstract void SetLightBarColor(UnityEngine.Color color);
    }
}

namespace UnityEngine.InputSystem.Editor
{
    public static class InputActionCodeGenerator
    {
        public static string GenerateWrapperCode(UnityEngine.InputSystem.InputActionAsset asset, UnityEngine.InputSystem.Editor.InputActionCodeGenerator.Options options = default(UnityEngine.InputSystem.Editor.InputActionCodeGenerator.Options));
        public static bool GenerateWrapperCode(string filePath, UnityEngine.InputSystem.InputActionAsset asset, UnityEngine.InputSystem.Editor.InputActionCodeGenerator.Options options);
        public struct Options
        {
            public string className { get; set; }
            public string namespaceName { get; set; }
            public string sourceAssetPath { get; set; }
        }
    }

    public sealed class InputControlPathEditor : System.IDisposable
    {
        public System.Action onModified { get; }
        public UnityEditor.SerializedProperty pathProperty { get; }
        public InputControlPathEditor(UnityEditor.SerializedProperty pathProperty, UnityEngine.InputSystem.Editor.InputControlPickerState pickerState, System.Action onModified, UnityEngine.GUIContent label = default(UnityEngine.GUIContent)) {}
        public virtual void Dispose();
        public void OnGUI();
        public void OnGUI(UnityEngine.Rect rect);
        public void SetControlPathsToMatch(System.Collections.Generic.IEnumerable<string> controlPaths);
        public void SetExpectedControlLayout(string expectedControlLayout);
        public void SetExpectedControlLayoutFromAttribute();
    }

    public sealed class InputControlPicker : System.IDisposable
    {
        public UnityEngine.InputSystem.Editor.InputControlPickerState state { get; }
        public InputControlPicker(UnityEngine.InputSystem.Editor.InputControlPicker.Mode mode, System.Action<string> onPick, UnityEngine.InputSystem.Editor.InputControlPickerState state) {}
        public virtual void Dispose();
        public void Show(UnityEngine.Rect rect);
        public enum Mode
        {
            public const UnityEngine.InputSystem.Editor.InputControlPicker.Mode PickControl = 0;
            public const UnityEngine.InputSystem.Editor.InputControlPicker.Mode PickDevice = 1;
            public int value__;
        }
    }

    public class InputControlPickerState
    {
        public InputControlPickerState() {}
    }

    public abstract class InputParameterEditor
    {
        public object target { get; }
        protected InputParameterEditor() {}
        public abstract void OnGUI();
    }

    public abstract class InputParameterEditor<TObject> : UnityEngine.InputSystem.Editor.InputParameterEditor where TObject : class
    {
        public TObject target { get; }
        protected InputParameterEditor() {}
        protected virtual void OnEnable();
    }
}

namespace UnityEngine.InputSystem.EnhancedTouch
{
    public static class EnhancedTouchSupport
    {
        public static bool enabled { get; }
        public static void Disable();
        public static void Enable();
    }

    public class Finger
    {
        public UnityEngine.InputSystem.EnhancedTouch.Touch currentTouch { get; }
        public int index { get; }
        public bool isActive { get; }
        public UnityEngine.InputSystem.EnhancedTouch.Touch lastTouch { get; }
        public UnityEngine.InputSystem.Touchscreen screen { get; }
        public UnityEngine.Vector2 screenPosition { get; }
        public UnityEngine.InputSystem.EnhancedTouch.TouchHistory touchHistory { get; }
    }

    public struct Touch : System.IEquatable<UnityEngine.InputSystem.EnhancedTouch.Touch>
    {
        public static event System.Action<UnityEngine.InputSystem.EnhancedTouch.Finger> onFingerDown;
        public static event System.Action<UnityEngine.InputSystem.EnhancedTouch.Finger> onFingerMove;
        public static event System.Action<UnityEngine.InputSystem.EnhancedTouch.Finger> onFingerUp;
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.EnhancedTouch.Finger> activeFingers { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.EnhancedTouch.Touch> activeTouches { get; }
        public UnityEngine.Vector2 delta { get; }
        public UnityEngine.InputSystem.EnhancedTouch.Finger finger { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.EnhancedTouch.Finger> fingers { get; }
        public UnityEngine.InputSystem.EnhancedTouch.TouchHistory history { get; }
        public bool isInProgress { get; }
        public bool isTap { get; }
        public static int maxHistoryLengthPerFinger { get; }
        public UnityEngine.InputSystem.TouchPhase phase { get; }
        public float pressure { get; }
        public UnityEngine.Vector2 radius { get; }
        public UnityEngine.InputSystem.Touchscreen screen { get; }
        public UnityEngine.Vector2 screenPosition { get; }
        public static System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.Touchscreen> screens { get; }
        public UnityEngine.Vector2 startScreenPosition { get; }
        public double startTime { get; }
        public int tapCount { get; }
        public double time { get; }
        public int touchId { get; }
        public bool valid { get; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.EnhancedTouch.Touch other);
        public virtual int GetHashCode();
        public virtual string ToString();
    }

    [System.Reflection.DefaultMember(@"Item")] public struct TouchHistory : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.EnhancedTouch.Touch>, System.Collections.Generic.IReadOnlyCollection<UnityEngine.InputSystem.EnhancedTouch.Touch>, System.Collections.Generic.IReadOnlyList<UnityEngine.InputSystem.EnhancedTouch.Touch>, System.Collections.IEnumerable
    {
        public virtual int Count { get; }
        public virtual UnityEngine.InputSystem.EnhancedTouch.Touch this[int index] { get; }
        public virtual System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.EnhancedTouch.Touch> GetEnumerator();
    }

    [UnityEditor.InitializeOnLoad] [UnityEngine.AddComponentMenu(@"Input/Debug/Touch Simulation")] [UnityEngine.ExecuteInEditMode] public class TouchSimulation : UnityEngine.MonoBehaviour, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor
    {
        public static UnityEngine.InputSystem.EnhancedTouch.TouchSimulation instance { get; }
        public UnityEngine.InputSystem.Touchscreen simulatedTouchscreen { get; }
        public TouchSimulation() {}
        protected void AddPointer(UnityEngine.InputSystem.Pointer pointer);
        public static void Destroy();
        public static void Disable();
        public static void Enable();
        protected void InstallStateChangeMonitors(int startIndex = 0);
        protected void OnDisable();
        protected void OnEnable();
        protected void OnSourceControlChangedValue(UnityEngine.InputSystem.InputControl control, double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, long sourceDeviceAndButtonIndex);
        protected void RemovePointer(UnityEngine.InputSystem.Pointer pointer);
        protected void UninstallStateChangeMonitors(int startIndex = 0);
    }
}

namespace UnityEngine.InputSystem.Haptics
{
    public interface IDualMotorRumble : UnityEngine.InputSystem.Haptics.IHaptics
    {
        public abstract void SetMotorSpeeds(float lowFrequency, float highFrequency);
    }

    public interface IHaptics
    {
        public abstract void PauseHaptics();
        public abstract void ResetHaptics();
        public abstract void ResumeHaptics();
    }
}

namespace UnityEngine.InputSystem.HID
{
    [UnityEngine.Scripting.Preserve] public class HID : UnityEngine.InputSystem.InputDevice
    {
        public UnityEngine.InputSystem.HID.HID.HIDDeviceDescriptor hidDescriptor { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC QueryHIDParsedReportDescriptorDeviceCommandType { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC QueryHIDReportDescriptorDeviceCommandType { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC QueryHIDReportDescriptorSizeDeviceCommandType { get; }
        public HID() {}
        public static string UsagePageToString(UnityEngine.InputSystem.HID.HID.UsagePage usagePage);
        public static string UsageToString(UnityEngine.InputSystem.HID.HID.UsagePage usagePage, int usage);
        public enum Button
        {
            public const UnityEngine.InputSystem.HID.HID.Button Primary = 1;
            public const UnityEngine.InputSystem.HID.HID.Button Secondary = 2;
            public const UnityEngine.InputSystem.HID.HID.Button Tertiary = 3;
            public const UnityEngine.InputSystem.HID.HID.Button Undefined = 0;
            public int value__;
        }
        public enum GenericDesktop
        {
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop ApplicationBreak = 165;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop ApplicationDebuggerBreak = 166;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop AssistiveControl = 10;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop ByteCount = 59;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop CountedBuffer = 58;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Dial = 55;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop DpadDown = 145;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop DpadLeft = 147;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop DpadRight = 146;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop DpadUp = 144;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop FeatureNotification = 71;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Gamepad = 5;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop HatSwitch = 57;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Joystick = 4;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Keyboard = 6;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Keypad = 7;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop MotionWakeup = 60;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Mouse = 2;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop MultiAxisController = 8;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Pointer = 1;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop ResolutionMultiplier = 72;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Rx = 51;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Ry = 52;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Rz = 53;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Select = 62;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Slider = 54;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Start = 61;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemAppMenu = 134;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemBreak = 163;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemColdRestart = 142;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemContextMenu = 132;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemControl = 128;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDebuggerBreak = 164;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDisplayBoth = 179;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDisplayDual = 180;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDisplayExternal = 178;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDisplayInternal = 177;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDisplayInvert = 176;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDisplayLCDAutoScale = 183;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDisplaySwapPrimarySecondary = 182;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDisplayToggleIntExt = 181;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemDock = 160;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemHibernate = 168;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemMainMenu = 133;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemMenuDown = 141;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemMenuExit = 136;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemMenuHelp = 135;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemMenuLeft = 139;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemMenuRight = 138;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemMenuSelect = 137;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemMenuUp = 140;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemPowerDown = 129;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemSetup = 162;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemSleep = 130;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemSpeakerMute = 167;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemUndock = 161;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemWakeUp = 131;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop SystemWarmRestart = 143;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop TabletPCControls = 9;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Undefined = 0;
            public int value__;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Vbrx = 67;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Vbry = 68;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Vbrz = 69;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Vno = 70;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Vx = 64;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Vy = 65;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Vz = 66;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Wheel = 56;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop X = 48;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Y = 49;
            public const UnityEngine.InputSystem.HID.HID.GenericDesktop Z = 50;
        }
        public struct HIDCollectionDescriptor
        {
            public int childCount;
            public int firstChild;
            public int parent;
            public UnityEngine.InputSystem.HID.HID.HIDCollectionType type;
            public int usage;
            public UnityEngine.InputSystem.HID.HID.UsagePage usagePage;
        }
        public enum HIDCollectionType
        {
            public const UnityEngine.InputSystem.HID.HID.HIDCollectionType Application = 1;
            public const UnityEngine.InputSystem.HID.HID.HIDCollectionType Logical = 2;
            public const UnityEngine.InputSystem.HID.HID.HIDCollectionType NamedArray = 4;
            public const UnityEngine.InputSystem.HID.HID.HIDCollectionType Physical = 0;
            public const UnityEngine.InputSystem.HID.HID.HIDCollectionType Report = 3;
            public const UnityEngine.InputSystem.HID.HID.HIDCollectionType UsageModifier = 6;
            public const UnityEngine.InputSystem.HID.HID.HIDCollectionType UsageSwitch = 5;
            public int value__;
        }
        public struct HIDDeviceDescriptor
        {
            public UnityEngine.InputSystem.HID.HID.HIDCollectionDescriptor[] collections;
            public UnityEngine.InputSystem.HID.HID.HIDElementDescriptor[] elements;
            public int featureReportSize;
            public int inputReportSize;
            public int outputReportSize;
            public int productId;
            public int usage;
            public UnityEngine.InputSystem.HID.HID.UsagePage usagePage;
            public int vendorId;
            public static UnityEngine.InputSystem.HID.HID.HIDDeviceDescriptor FromJson(string json);
            public string ToJson();
        }
        public struct HIDDeviceDescriptorBuilder
        {
            public int usage;
            public UnityEngine.InputSystem.HID.HID.UsagePage usagePage;
            public HIDDeviceDescriptorBuilder(UnityEngine.InputSystem.HID.HID.GenericDesktop usage) {}
            public HIDDeviceDescriptorBuilder(UnityEngine.InputSystem.HID.HID.UsagePage usagePage, int usage) {}
            public UnityEngine.InputSystem.HID.HID.HIDDeviceDescriptorBuilder AddElement(UnityEngine.InputSystem.HID.HID.GenericDesktop usage, int sizeInBits);
            public UnityEngine.InputSystem.HID.HID.HIDDeviceDescriptorBuilder AddElement(UnityEngine.InputSystem.HID.HID.UsagePage usagePage, int usage, int sizeInBits);
            public UnityEngine.InputSystem.HID.HID.HIDDeviceDescriptor Finish();
            public UnityEngine.InputSystem.HID.HID.HIDDeviceDescriptorBuilder StartReport(UnityEngine.InputSystem.HID.HID.HIDReportType reportType, int reportId = 1);
            public UnityEngine.InputSystem.HID.HID.HIDDeviceDescriptorBuilder WithLogicalMinMax(int min, int max);
            public UnityEngine.InputSystem.HID.HID.HIDDeviceDescriptorBuilder WithPhysicalMinMax(int min, int max);
        }
        public struct HIDElementDescriptor
        {
            public int collectionIndex;
            public UnityEngine.InputSystem.HID.HID.HIDElementFlags flags;
            public int logicalMax;
            public int logicalMin;
            public int physicalMax;
            public int physicalMin;
            public int reportId;
            public int reportOffsetInBits;
            public int reportSizeInBits;
            public UnityEngine.InputSystem.HID.HID.HIDReportType reportType;
            public int unit;
            public int unitExponent;
            public int usage;
            public System.Nullable<int> usageMax;
            public System.Nullable<int> usageMin;
            public UnityEngine.InputSystem.HID.HID.UsagePage usagePage;
            public bool hasNullState { get; }
            public bool hasPreferredState { get; }
            public bool isArray { get; }
            public bool isConstant { get; }
            public bool isNonLinear { get; }
            public bool isRelative { get; }
            public bool isWrapping { get; }
            public bool Is(UnityEngine.InputSystem.HID.HID.UsagePage usagePage, int usage);
        }
        [System.Flags] public enum HIDElementFlags
        {
            public const UnityEngine.InputSystem.HID.HID.HIDElementFlags BufferedBytes = 256;
            public const UnityEngine.InputSystem.HID.HID.HIDElementFlags Constant = 1;
            public const UnityEngine.InputSystem.HID.HID.HIDElementFlags NonLinear = 16;
            public const UnityEngine.InputSystem.HID.HID.HIDElementFlags NoPreferred = 32;
            public const UnityEngine.InputSystem.HID.HID.HIDElementFlags NullState = 64;
            public const UnityEngine.InputSystem.HID.HID.HIDElementFlags Relative = 4;
            public int value__;
            public const UnityEngine.InputSystem.HID.HID.HIDElementFlags Variable = 2;
            public const UnityEngine.InputSystem.HID.HID.HIDElementFlags Volatile = 128;
            public const UnityEngine.InputSystem.HID.HID.HIDElementFlags Wrap = 8;
        }
        public enum HIDReportType
        {
            public const UnityEngine.InputSystem.HID.HID.HIDReportType Feature = 3;
            public const UnityEngine.InputSystem.HID.HID.HIDReportType Input = 1;
            public const UnityEngine.InputSystem.HID.HID.HIDReportType Output = 2;
            public const UnityEngine.InputSystem.HID.HID.HIDReportType Unknown = 0;
            public int value__;
        }
        public enum Simulation
        {
            public const UnityEngine.InputSystem.HID.HID.Simulation Accelerator = 196;
            public const UnityEngine.InputSystem.HID.HID.Simulation Aileron = 176;
            public const UnityEngine.InputSystem.HID.HID.Simulation AileronTrim = 177;
            public const UnityEngine.InputSystem.HID.HID.Simulation AirplaneSimulationDevice = 9;
            public const UnityEngine.InputSystem.HID.HID.Simulation AntiTorqueControl = 178;
            public const UnityEngine.InputSystem.HID.HID.Simulation AutomobileSimulationDevice = 2;
            public const UnityEngine.InputSystem.HID.HID.Simulation AutopilotEnable = 179;
            public const UnityEngine.InputSystem.HID.HID.Simulation Ballast = 204;
            public const UnityEngine.InputSystem.HID.HID.Simulation BarrelElevation = 202;
            public const UnityEngine.InputSystem.HID.HID.Simulation BicycleCrank = 205;
            public const UnityEngine.InputSystem.HID.HID.Simulation BicylcleSimulationDevice = 12;
            public const UnityEngine.InputSystem.HID.HID.Simulation Brake = 197;
            public const UnityEngine.InputSystem.HID.HID.Simulation ChaffRelease = 180;
            public const UnityEngine.InputSystem.HID.HID.Simulation Clutch = 198;
            public const UnityEngine.InputSystem.HID.HID.Simulation CollectiveControl = 181;
            public const UnityEngine.InputSystem.HID.HID.Simulation CyclicControl = 34;
            public const UnityEngine.InputSystem.HID.HID.Simulation CyclicTrim = 35;
            public const UnityEngine.InputSystem.HID.HID.Simulation DiveBreak = 182;
            public const UnityEngine.InputSystem.HID.HID.Simulation DivePlane = 203;
            public const UnityEngine.InputSystem.HID.HID.Simulation ElectronicCountermeasures = 183;
            public const UnityEngine.InputSystem.HID.HID.Simulation Elevator = 184;
            public const UnityEngine.InputSystem.HID.HID.Simulation ElevatorTrim = 185;
            public const UnityEngine.InputSystem.HID.HID.Simulation FlareRelease = 189;
            public const UnityEngine.InputSystem.HID.HID.Simulation FlightCommunications = 188;
            public const UnityEngine.InputSystem.HID.HID.Simulation FlightControlStick = 32;
            public const UnityEngine.InputSystem.HID.HID.Simulation FlightSimulationDevice = 1;
            public const UnityEngine.InputSystem.HID.HID.Simulation FlightStick = 33;
            public const UnityEngine.InputSystem.HID.HID.Simulation FlightYoke = 36;
            public const UnityEngine.InputSystem.HID.HID.Simulation FrontBrake = 207;
            public const UnityEngine.InputSystem.HID.HID.Simulation HandleBars = 206;
            public const UnityEngine.InputSystem.HID.HID.Simulation HelicopterSimulationDevice = 10;
            public const UnityEngine.InputSystem.HID.HID.Simulation LandingGear = 190;
            public const UnityEngine.InputSystem.HID.HID.Simulation MagicCarpetSimulationDevice = 11;
            public const UnityEngine.InputSystem.HID.HID.Simulation MotorcycleSimulationDevice = 7;
            public const UnityEngine.InputSystem.HID.HID.Simulation RearBrake = 208;
            public const UnityEngine.InputSystem.HID.HID.Simulation Rudder = 186;
            public const UnityEngine.InputSystem.HID.HID.Simulation SailingSimulationDevice = 6;
            public const UnityEngine.InputSystem.HID.HID.Simulation Shifter = 199;
            public const UnityEngine.InputSystem.HID.HID.Simulation SpaceshipSimulationDevice = 4;
            public const UnityEngine.InputSystem.HID.HID.Simulation SportsSimulationDevice = 8;
            public const UnityEngine.InputSystem.HID.HID.Simulation Steering = 200;
            public const UnityEngine.InputSystem.HID.HID.Simulation SubmarineSimulationDevice = 5;
            public const UnityEngine.InputSystem.HID.HID.Simulation TankSimulationDevice = 3;
            public const UnityEngine.InputSystem.HID.HID.Simulation Throttle = 187;
            public const UnityEngine.InputSystem.HID.HID.Simulation ToeBreak = 191;
            public const UnityEngine.InputSystem.HID.HID.Simulation TrackControl = 37;
            public const UnityEngine.InputSystem.HID.HID.Simulation Trigger = 192;
            public const UnityEngine.InputSystem.HID.HID.Simulation TurretDirection = 201;
            public const UnityEngine.InputSystem.HID.HID.Simulation Undefined = 0;
            public int value__;
            public const UnityEngine.InputSystem.HID.HID.Simulation WeaponsArm = 193;
            public const UnityEngine.InputSystem.HID.HID.Simulation WeaponsSelect = 194;
            public const UnityEngine.InputSystem.HID.HID.Simulation WingFlaps = 195;
        }
        public enum UsagePage
        {
            public const UnityEngine.InputSystem.HID.HID.UsagePage AlphanumericDisplay = 20;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Arcade = 145;
            public const UnityEngine.InputSystem.HID.HID.UsagePage BarCodeScanner = 140;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Button = 9;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Camera = 144;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Consumer = 12;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Digitizer = 13;
            public const UnityEngine.InputSystem.HID.HID.UsagePage GameControls = 5;
            public const UnityEngine.InputSystem.HID.HID.UsagePage GenericDesktop = 1;
            public const UnityEngine.InputSystem.HID.HID.UsagePage GenericDeviceControls = 6;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Keyboard = 7;
            public const UnityEngine.InputSystem.HID.HID.UsagePage LEDs = 8;
            public const UnityEngine.InputSystem.HID.HID.UsagePage MagneticStripeReader = 142;
            public const UnityEngine.InputSystem.HID.HID.UsagePage MedicalInstruments = 64;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Monitor = 128;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Ordinal = 10;
            public const UnityEngine.InputSystem.HID.HID.UsagePage PID = 15;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Power = 132;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Simulation = 2;
            public const UnityEngine.InputSystem.HID.HID.UsagePage SportControls = 4;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Telephony = 11;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Undefined = 0;
            public const UnityEngine.InputSystem.HID.HID.UsagePage Unicode = 16;
            public int value__;
            public const UnityEngine.InputSystem.HID.HID.UsagePage VendorDefined = 65280;
            public const UnityEngine.InputSystem.HID.HID.UsagePage VRControls = 3;
        }
    }

    public static class HIDSupport
    {
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.HID.HIDSupport.HIDPageUsage> supportedHIDUsages { get; set; }
        public struct HIDPageUsage
        {
            public UnityEngine.InputSystem.HID.HID.UsagePage page;
            public int usage;
            public HIDPageUsage(UnityEngine.InputSystem.HID.HID.GenericDesktop usage) {}
            public HIDPageUsage(UnityEngine.InputSystem.HID.HID.UsagePage page, int usage) {}
        }
    }
}

namespace UnityEngine.InputSystem.Interactions
{
    [System.ComponentModel.DisplayName(@"Hold")] [UnityEngine.Scripting.Preserve] public class HoldInteraction : UnityEngine.InputSystem.IInputInteraction
    {
        public float duration;
        public float pressPoint;
        public HoldInteraction() {}
        public virtual void Process(ref UnityEngine.InputSystem.InputInteractionContext context);
        public virtual void Reset();
    }

    [UnityEngine.Scripting.Preserve] public class MultiTapInteraction : UnityEngine.InputSystem.IInputInteraction, UnityEngine.InputSystem.IInputInteraction<float>
    {
        public float pressPoint;
        [UnityEngine.Tooltip(@"How many taps need to be performed in succession. Two means double-tap, three means triple-tap, and so on.")] public int tapCount;
        [UnityEngine.Tooltip(@"The maximum delay (in seconds) allowed between each tap. If this time is exceeded, the multi-tap is canceled.")] public float tapDelay;
        [UnityEngine.Tooltip(@"The maximum time (in seconds) allowed to elapse between pressing and releasing a control for it to register as a tap.")] public float tapTime;
        public MultiTapInteraction() {}
        public virtual void Process(ref UnityEngine.InputSystem.InputInteractionContext context);
        public virtual void Reset();
    }

    public enum PressBehavior
    {
        public const UnityEngine.InputSystem.Interactions.PressBehavior PressAndRelease = 2;
        public const UnityEngine.InputSystem.Interactions.PressBehavior PressOnly = 0;
        public const UnityEngine.InputSystem.Interactions.PressBehavior ReleaseOnly = 1;
        public int value__;
    }

    [System.ComponentModel.DisplayName(@"Press")] [UnityEngine.Scripting.Preserve] public class PressInteraction : UnityEngine.InputSystem.IInputInteraction
    {
        [UnityEngine.Tooltip(@"Determines how button presses trigger the action. By default (PressOnly), the action is performed on press. With ReleaseOnly, the action is performed on release. With PressAndRelease, the action is performed on press and release.")] public UnityEngine.InputSystem.Interactions.PressBehavior behavior;
        [UnityEngine.Tooltip(@"The amount of actuation a control requires before being considered pressed. If not set, default to 'Default Press Point' in the global input settings.")] public float pressPoint;
        public PressInteraction() {}
        public virtual void Process(ref UnityEngine.InputSystem.InputInteractionContext context);
        public virtual void Reset();
    }

    [System.ComponentModel.DisplayName(@"Long Tap")] [UnityEngine.Scripting.Preserve] public class SlowTapInteraction : UnityEngine.InputSystem.IInputInteraction
    {
        public float duration;
        public float pressPoint;
        public SlowTapInteraction() {}
        public virtual void Process(ref UnityEngine.InputSystem.InputInteractionContext context);
        public virtual void Reset();
    }

    [System.ComponentModel.DisplayName(@"Tap")] [UnityEngine.Scripting.Preserve] public class TapInteraction : UnityEngine.InputSystem.IInputInteraction
    {
        public float duration;
        public float pressPoint;
        public TapInteraction() {}
        public virtual void Process(ref UnityEngine.InputSystem.InputInteractionContext context);
        public virtual void Reset();
    }
}

namespace UnityEngine.InputSystem.iOS
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"iOS DualShock 4 Gamepad", stateType = typeof(UnityEngine.InputSystem.iOS.LowLevel.iOSGameControllerState))] [UnityEngine.Scripting.Preserve] public class DualShock4GampadiOS : UnityEngine.InputSystem.DualShock.DualShockGamepad
    {
        public DualShock4GampadiOS() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"iOS Gamepad", stateType = typeof(UnityEngine.InputSystem.iOS.LowLevel.iOSGameControllerState))] [UnityEngine.Scripting.Preserve] public class iOSGameController : UnityEngine.InputSystem.Gamepad
    {
        public iOSGameController() {}
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"iOS Xbox One Gamepad", stateType = typeof(UnityEngine.InputSystem.iOS.LowLevel.iOSGameControllerState))] [UnityEngine.Scripting.Preserve] public class XboxOneGampadiOS : UnityEngine.InputSystem.XInput.XInputController
    {
        public XboxOneGampadiOS() {}
    }
}

namespace UnityEngine.InputSystem.Layouts
{
    [System.AttributeUsage(384, AllowMultiple = true)] public sealed class InputControlAttribute : UnityEngine.PropertyAttribute
    {
        public string alias { get; set; }
        public string[] aliases { get; set; }
        public int arraySize { get; set; }
        public System.UInt32 bit { get; set; }
        public object defaultState { get; set; }
        public string displayName { get; set; }
        public string format { get; set; }
        public string layout { get; set; }
        public object maxValue { get; set; }
        public object minValue { get; set; }
        public string name { get; set; }
        public bool noisy { get; set; }
        public System.UInt32 offset { get; set; }
        public string parameters { get; set; }
        public string processors { get; set; }
        public string shortDisplayName { get; set; }
        public System.UInt32 sizeInBits { get; set; }
        public bool synthetic { get; set; }
        public string usage { get; set; }
        public string[] usages { get; set; }
        public string useStateFrom { get; set; }
        public string variants { get; set; }
        public InputControlAttribute() {}
    }

    [System.Reflection.DefaultMember(@"Item")] public class InputControlLayout
    {
        public const string VariantSeparator = ;;
        public System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.Utilities.InternedString> appliedOverrides { get; }
        public System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.Utilities.InternedString> baseLayouts { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.InternedString> commonUsages { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Layouts.InputControlLayout.ControlItem> controls { get; }
        public static UnityEngine.InputSystem.Utilities.InternedString DefaultVariant { get; }
        public string displayName { get; }
        public bool hideInUI { get; }
        public bool isControlLayout { get; }
        public bool isDeviceLayout { get; }
        public bool isGenericTypeOfDevice { get; }
        public bool isOverride { get; }
        public UnityEngine.InputSystem.Layouts.InputControlLayout.ControlItem this[string path] { get; }
        public UnityEngine.InputSystem.Utilities.InternedString name { get; }
        public UnityEngine.InputSystem.Utilities.FourCC stateFormat { get; }
        public int stateSizeInBytes { get; }
        public System.Type type { get; }
        public bool updateBeforeRender { get; }
        public UnityEngine.InputSystem.Utilities.InternedString variants { get; }
        public System.Nullable<UnityEngine.InputSystem.Layouts.InputControlLayout.ControlItem> FindControl(UnityEngine.InputSystem.Utilities.InternedString path);
        public System.Nullable<UnityEngine.InputSystem.Layouts.InputControlLayout.ControlItem> FindControlIncludingArrayElements(string path, out int arrayIndex);
        public static UnityEngine.InputSystem.Layouts.InputControlLayout FromJson(string json);
        public static UnityEngine.InputSystem.Layouts.InputControlLayout FromType(string name, System.Type type);
        public System.Type GetValueType();
        public void MergeLayout(UnityEngine.InputSystem.Layouts.InputControlLayout other);
        public string ToJson();
        public class Builder
        {
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Layouts.InputControlLayout.ControlItem> controls { get; }
            public string displayName { get; set; }
            public string extendsLayout { get; set; }
            public string name { get; set; }
            public UnityEngine.InputSystem.Utilities.FourCC stateFormat { get; set; }
            public int stateSizeInBytes { get; set; }
            public System.Type type { get; set; }
            public System.Nullable<bool> updateBeforeRender { get; set; }
            public Builder() {}
            public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder AddControl(string name);
            public UnityEngine.InputSystem.Layouts.InputControlLayout Build();
            public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder Extend(string baseLayoutName);
            public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder WithDisplayName(string displayName);
            public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder WithFormat(string format);
            public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder WithFormat(UnityEngine.InputSystem.Utilities.FourCC format);
            public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder WithName(string name);
            public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder WithSizeInBytes(int sizeInBytes);
            public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder WithType<T>() where T : UnityEngine.InputSystem.InputControl;
            public struct ControlBuilder
            {
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder AsArrayOfControlsWithSize(int arraySize);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder IsNoisy(bool value);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder IsSynthetic(bool value);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder UsingStateFrom(string path);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithBitOffset(System.UInt32 bit);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithByteOffset(System.UInt32 offset);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithDefaultState(UnityEngine.InputSystem.Utilities.PrimitiveValue value);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithDisplayName(string displayName);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithFormat(string format);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithFormat(UnityEngine.InputSystem.Utilities.FourCC format);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithLayout(string layout);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithParameters(string parameters);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithProcessors(string processors);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithSizeInBits(System.UInt32 sizeInBits);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithUsages(System.Collections.Generic.IEnumerable<string> usages);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithUsages(params string[] usages);
                public UnityEngine.InputSystem.Layouts.InputControlLayout.Builder.ControlBuilder WithUsages(params UnityEngine.InputSystem.Utilities.InternedString[] usages);
            }
        }
        public struct ControlItem
        {
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.InternedString> aliases { get; }
            public int arraySize { get; }
            public System.UInt32 bit { get; }
            public UnityEngine.InputSystem.Utilities.PrimitiveValue defaultState { get; }
            public string displayName { get; }
            public UnityEngine.InputSystem.Utilities.FourCC format { get; }
            public bool isArray { get; }
            public bool isFirstDefinedInThisLayout { get; }
            public bool isModifyingExistingControl { get; }
            public bool isNoisy { get; }
            public bool isSynthetic { get; }
            public UnityEngine.InputSystem.Utilities.InternedString layout { get; }
            public UnityEngine.InputSystem.Utilities.PrimitiveValue maxValue { get; }
            public UnityEngine.InputSystem.Utilities.PrimitiveValue minValue { get; }
            public UnityEngine.InputSystem.Utilities.InternedString name { get; }
            public System.UInt32 offset { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.NamedValue> parameters { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.NameAndParameters> processors { get; }
            public string shortDisplayName { get; }
            public System.UInt32 sizeInBits { get; }
            public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.InternedString> usages { get; }
            public string useStateFrom { get; }
            public UnityEngine.InputSystem.Utilities.InternedString variants { get; }
            public UnityEngine.InputSystem.Layouts.InputControlLayout.ControlItem Merge(UnityEngine.InputSystem.Layouts.InputControlLayout.ControlItem other);
        }
        public class LayoutNotFoundException : System.Exception
        {
            public string layout { get; }
            public LayoutNotFoundException() {}
            public LayoutNotFoundException(string name) {}
            protected LayoutNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) {}
            public LayoutNotFoundException(string message, System.Exception innerException) {}
            public LayoutNotFoundException(string name, string message) {}
        }
    }

    [System.AttributeUsage(4, Inherited = false)] public sealed class InputControlLayoutAttribute : System.Attribute
    {
        public string[] commonUsages { get; set; }
        public string description { get; set; }
        public string displayName { get; set; }
        public bool hideInUI { get; set; }
        public bool isGenericTypeOfDevice { get; set; }
        public string stateFormat { get; set; }
        public System.Type stateType { get; set; }
        public bool updateBeforeRender { get; set; }
        public string variants { get; set; }
        public InputControlLayoutAttribute() {}
    }

    public struct InputDeviceDescription : System.IEquatable<UnityEngine.InputSystem.Layouts.InputDeviceDescription>
    {
        public string capabilities { get; set; }
        public string deviceClass { get; set; }
        public bool empty { get; }
        public string interfaceName { get; set; }
        public string manufacturer { get; set; }
        public string product { get; set; }
        public string serial { get; set; }
        public string version { get; set; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.Layouts.InputDeviceDescription other);
        public static UnityEngine.InputSystem.Layouts.InputDeviceDescription FromJson(string json);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.InputSystem.Layouts.InputDeviceDescription left, UnityEngine.InputSystem.Layouts.InputDeviceDescription right);
        public static bool operator !=(UnityEngine.InputSystem.Layouts.InputDeviceDescription left, UnityEngine.InputSystem.Layouts.InputDeviceDescription right);
        public string ToJson();
        public virtual string ToString();
    }

    public delegate string InputDeviceFindControlLayoutDelegate(ref UnityEngine.InputSystem.Layouts.InputDeviceDescription description, string matchedLayout, UnityEngine.InputSystem.LowLevel.InputDeviceExecuteCommandDelegate executeDeviceCommand);

    public struct InputDeviceMatcher : System.IEquatable<UnityEngine.InputSystem.Layouts.InputDeviceMatcher>
    {
        public bool empty { get; }
        public System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> patterns { get; }
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.Layouts.InputDeviceMatcher other);
        public static UnityEngine.InputSystem.Layouts.InputDeviceMatcher FromDeviceDescription(UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription);
        public virtual int GetHashCode();
        public float MatchPercentage(UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription);
        public static bool operator ==(UnityEngine.InputSystem.Layouts.InputDeviceMatcher left, UnityEngine.InputSystem.Layouts.InputDeviceMatcher right);
        public static bool operator !=(UnityEngine.InputSystem.Layouts.InputDeviceMatcher left, UnityEngine.InputSystem.Layouts.InputDeviceMatcher right);
        public virtual string ToString();
        public UnityEngine.InputSystem.Layouts.InputDeviceMatcher WithCapability<TValue>(string path, TValue value);
        public UnityEngine.InputSystem.Layouts.InputDeviceMatcher WithDeviceClass(string pattern, bool supportRegex = True);
        public UnityEngine.InputSystem.Layouts.InputDeviceMatcher WithInterface(string pattern, bool supportRegex = True);
        public UnityEngine.InputSystem.Layouts.InputDeviceMatcher WithManufacturer(string pattern, bool supportRegex = True);
        public UnityEngine.InputSystem.Layouts.InputDeviceMatcher WithProduct(string pattern, bool supportRegex = True);
        public UnityEngine.InputSystem.Layouts.InputDeviceMatcher WithVersion(string pattern, bool supportRegex = True);
    }
}

namespace UnityEngine.InputSystem.LowLevel
{
    public struct DeltaStateEvent : UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent;
        public UnityEngine.InputSystem.Utilities.FourCC stateFormat;
        public System.UInt32 stateOffset;
        public const int Type = 1145852993;
        public void* deltaState { get; }
        public System.UInt32 deltaStateSizeInBytes { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.DeltaStateEvent* From(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr);
        public static Unity.Collections.NativeArray<byte> From(UnityEngine.InputSystem.InputControl control, out UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, Unity.Collections.Allocator allocator = 2);
        public UnityEngine.InputSystem.LowLevel.InputEventPtr ToEventPtr();
    }

    public struct DeviceConfigurationEvent : UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent;
        public const int Type = 1145259591;
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.DeviceConfigurationEvent Create(int deviceId, double time);
        public UnityEngine.InputSystem.LowLevel.InputEventPtr ToEventPtr();
    }

    public struct DeviceRemoveEvent : UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent;
        public const int Type = 1146242381;
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.DeviceRemoveEvent Create(int deviceId, double time = -1);
        public UnityEngine.InputSystem.LowLevel.InputEventPtr ToEventPtr();
    }

    public struct DisableDeviceCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.DisableDeviceCommand Create();
    }

    public struct EnableDeviceCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.EnableDeviceCommand Create();
    }

    public struct EnableIMECompositionCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public bool imeEnabled { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.EnableIMECompositionCommand Create(bool enabled);
    }

    public enum GamepadButton
    {
        public const UnityEngine.InputSystem.LowLevel.GamepadButton A = 6;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton B = 5;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton Circle = 5;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton Cross = 6;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton DpadDown = 1;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton DpadLeft = 2;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton DpadRight = 3;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton DpadUp = 0;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton East = 5;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton LeftShoulder = 10;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton LeftStick = 8;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton LeftTrigger = 32;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton North = 4;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton RightShoulder = 11;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton RightStick = 9;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton RightTrigger = 33;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton Select = 13;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton South = 6;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton Square = 7;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton Start = 12;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton Triangle = 4;
        public int value__;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton West = 7;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton X = 7;
        public const UnityEngine.InputSystem.LowLevel.GamepadButton Y = 4;
    }

    public struct GamepadState : UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 4, displayName = @"Button North", layout = @"Button", name = @"buttonNorth", shortDisplayName = @"Y")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 5, displayName = @"Button East", layout = @"Button", name = @"buttonEast", shortDisplayName = @"B", usages = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 6, displayName = @"Button South", layout = @"Button", name = @"buttonSouth", shortDisplayName = @"A", usages = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 7, displayName = @"Button West", layout = @"Button", name = @"buttonWest", shortDisplayName = @"X", usage = @"SecondaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"D-Pad", format = @"BIT", layout = @"Dpad", name = @"dpad", sizeInBits = 4, usage = @"Hatswitch")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 10, displayName = @"Left Shoulder", layout = @"Button", name = @"leftShoulder", shortDisplayName = @"LB")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 11, displayName = @"Right Shoulder", layout = @"Button", name = @"rightShoulder", shortDisplayName = @"RB")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 12, displayName = @"Start", layout = @"Button", name = @"start", usage = @"Menu")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 13, displayName = @"Select", layout = @"Button", name = @"select")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 8, displayName = @"Left Stick Press", layout = @"Button", name = @"leftStickPress")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 9, displayName = @"Right Stick Press", layout = @"Button", name = @"rightStickPress")] public System.UInt32 buttons;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Left Stick", layout = @"Stick", processors = @"stickDeadzone", shortDisplayName = @"LS", usage = @"Primary2DMotion")] public UnityEngine.Vector2 leftStick;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Left Trigger", format = @"FLT", layout = @"Button", shortDisplayName = @"LT", usage = @"SecondaryTrigger")] public float leftTrigger;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Right Stick", layout = @"Stick", processors = @"stickDeadzone", shortDisplayName = @"RS", usage = @"Secondary2DMotion")] public UnityEngine.Vector2 rightStick;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Right Trigger", format = @"FLT", layout = @"Button", shortDisplayName = @"RT", usage = @"SecondaryTrigger")] public float rightTrigger;
        public virtual UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public GamepadState(params UnityEngine.InputSystem.LowLevel.GamepadButton[] buttons) {}
        public UnityEngine.InputSystem.LowLevel.GamepadState WithButton(UnityEngine.InputSystem.LowLevel.GamepadButton button, bool value = True);
    }

    public interface IInputDeviceCommandInfo
    {
        public abstract UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
    }

    public interface IInputEventTypeInfo
    {
        public abstract UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
    }

    public interface IInputStateCallbackReceiver
    {
        public abstract bool GetStateOffsetForEvent(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, ref System.UInt32 offset);
        public abstract void OnNextUpdate();
        public abstract void OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
    }

    public interface IInputStateChangeMonitor
    {
        public abstract void NotifyControlStateChanged(UnityEngine.InputSystem.InputControl control, double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, long monitorIndex);
        public abstract void NotifyTimerExpired(UnityEngine.InputSystem.InputControl control, double time, long monitorIndex, int timerIndex);
    }

    public interface IInputStateTypeInfo
    {
        public abstract UnityEngine.InputSystem.Utilities.FourCC format { get; }
    }

    public interface IInputUpdateCallbackReceiver
    {
        public abstract void OnUpdate();
    }

    public struct IMECompositionEvent : UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent;
        public UnityEngine.InputSystem.LowLevel.IMECompositionString compositionString;
        public const int Type = 1229800787;
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.IMECompositionEvent Create(int deviceId, string compositionString, double time);
    }

    [System.Reflection.DefaultMember(@"Item")] public struct IMECompositionString : System.Collections.Generic.IEnumerable<char>, System.Collections.IEnumerable
    {
        public int Count { get; }
        public char this[int index] { get; }
        public IMECompositionString(string characters) {}
        public virtual System.Collections.Generic.IEnumerator<char> GetEnumerator();
        public virtual string ToString();
    }

    public struct InitiateUserAccountPairingCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.InitiateUserAccountPairingCommand Create();
        public enum Result
        {
            public const UnityEngine.InputSystem.LowLevel.InitiateUserAccountPairingCommand.Result ErrorAlreadyInProgress = -2;
            public const UnityEngine.InputSystem.LowLevel.InitiateUserAccountPairingCommand.Result ErrorNotSupported = -1;
            public const UnityEngine.InputSystem.LowLevel.InitiateUserAccountPairingCommand.Result SuccessfullyInitiated = 1;
            public int value__;
        }
    }

    public struct InputDeviceCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public const int BaseCommandSize = 8;
        public const long GenericFailure = -1;
        public const long GenericSuccess = 1;
        public int sizeInBytes;
        public UnityEngine.InputSystem.Utilities.FourCC type;
        public void* payloadPtr { get; }
        public int payloadSizeInBytes { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public InputDeviceCommand(UnityEngine.InputSystem.Utilities.FourCC type, int sizeInBytes = 8) {}
        public static Unity.Collections.NativeArray<byte> AllocateNative(UnityEngine.InputSystem.Utilities.FourCC type, int payloadSize);
    }

    public delegate System.Nullable<long> InputDeviceCommandDelegate(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.LowLevel.InputDeviceCommand* command);

    public delegate long InputDeviceExecuteCommandDelegate(ref UnityEngine.InputSystem.LowLevel.InputDeviceCommand command);

    public struct InputEvent
    {
        public const int InvalidEventId = 0;
        public int deviceId { get; set; }
        public int eventId { get; set; }
        public bool handled { get; set; }
        public System.UInt32 sizeInBytes { get; set; }
        public double time { get; set; }
        public UnityEngine.InputSystem.Utilities.FourCC type { get; set; }
        public InputEvent(UnityEngine.InputSystem.Utilities.FourCC type, int sizeInBytes, int deviceId, double time = -1) {}
        public static bool Equals(UnityEngine.InputSystem.LowLevel.InputEvent* first, UnityEngine.InputSystem.LowLevel.InputEvent* second);
        public virtual string ToString();
    }

    public struct InputEventBuffer : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.LowLevel.InputEventPtr>, System.Collections.IEnumerable, System.ICloneable, System.IDisposable
    {
        public const long BufferSizeUnknown = -1;
        public UnityEngine.InputSystem.LowLevel.InputEventPtr bufferPtr { get; }
        public long capacityInBytes { get; }
        public Unity.Collections.NativeArray<byte> data { get; }
        public int eventCount { get; }
        public long sizeInBytes { get; }
        public InputEventBuffer(Unity.Collections.NativeArray<byte> buffer, int eventCount, int sizeInBytes = -1) {}
        public InputEventBuffer(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr, int eventCount, int sizeInBytes = -1, int capacityInBytes = -1) {}
        public UnityEngine.InputSystem.LowLevel.InputEvent* AllocateEvent(int sizeInBytes, int capacityIncrementInBytes = 2048);
        public void AppendEvent(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr, int capacityIncrementInBytes = 2048);
        public UnityEngine.InputSystem.LowLevel.InputEventBuffer Clone();
        public bool Contains(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr);
        public virtual void Dispose();
        public virtual System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.LowLevel.InputEventPtr> GetEnumerator();
        public void Reset();
    }

    public struct InputEventPtr : System.IEquatable<UnityEngine.InputSystem.LowLevel.InputEventPtr>
    {
        public UnityEngine.InputSystem.LowLevel.InputEvent* data { get; }
        public int deviceId { get; set; }
        public bool handled { get; set; }
        public int id { get; set; }
        public System.UInt32 sizeInBytes { get; }
        public double time { get; set; }
        public UnityEngine.InputSystem.Utilities.FourCC type { get; }
        public bool valid { get; }
        public InputEventPtr(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.LowLevel.InputEventPtr other);
        public static UnityEngine.InputSystem.LowLevel.InputEventPtr From(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr);
        public static UnityEngine.InputSystem.LowLevel.InputEvent* FromInputEventPtr(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
        public virtual int GetHashCode();
        public bool IsA<TOtherEvent>() where TOtherEvent : System.ValueType, UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo, new();
        public UnityEngine.InputSystem.LowLevel.InputEventPtr Next();
        public static bool operator ==(UnityEngine.InputSystem.LowLevel.InputEventPtr left, UnityEngine.InputSystem.LowLevel.InputEventPtr right);
        public static UnityEngine.InputSystem.LowLevel.InputEvent* op_Implicit(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
        public static UnityEngine.InputSystem.LowLevel.InputEventPtr op_Implicit(UnityEngine.InputSystem.LowLevel.InputEvent* eventPtr);
        public static bool operator !=(UnityEngine.InputSystem.LowLevel.InputEventPtr left, UnityEngine.InputSystem.LowLevel.InputEventPtr right);
        public UnityEngine.InputSystem.LowLevel.InputEvent* ToPointer();
        public virtual string ToString();
    }

    public sealed class InputEventTrace : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.LowLevel.InputEventPtr>, System.Collections.IEnumerable, System.IDisposable
    {
        public event System.Action<UnityEngine.InputSystem.LowLevel.InputEventPtr> onEvent;
        public long allocatedSizeInBytes { get; }
        public int deviceId { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.LowLevel.InputEventTrace.DeviceInfo> deviceInfos { get; }
        public bool enabled { get; }
        public long eventCount { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC FrameMarkerEvent { get; }
        public long maxSizeInBytes { get; }
        public System.Func<UnityEngine.InputSystem.LowLevel.InputEventPtr, UnityEngine.InputSystem.InputDevice, bool> onFilterEvent { get; set; }
        public bool recordFrameMarkers { get; set; }
        public long totalEventSizeInBytes { get; }
        public InputEventTrace(long bufferSizeInBytes = 1048576, bool growBuffer = False, long maxBufferSizeInBytes = -1, long growIncrementSizeInBytes = -1) {}
        public InputEventTrace(UnityEngine.InputSystem.InputDevice device, long bufferSizeInBytes = 1048576, bool growBuffer = False, long maxBufferSizeInBytes = -1, long growIncrementSizeInBytes = -1) {}
        public void Clear();
        public void Disable();
        public virtual void Dispose();
        public void Enable();
        public virtual System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.LowLevel.InputEventPtr> GetEnumerator();
        public bool GetNextEvent(ref UnityEngine.InputSystem.LowLevel.InputEventPtr current);
        public static UnityEngine.InputSystem.LowLevel.InputEventTrace LoadFrom(System.IO.Stream stream);
        public static UnityEngine.InputSystem.LowLevel.InputEventTrace LoadFrom(string filePath);
        public void ReadFrom(System.IO.Stream stream);
        public void ReadFrom(string filePath);
        public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController Replay();
        public bool Resize(long newBufferSize);
        public void WriteTo(System.IO.Stream stream);
        public void WriteTo(string filePath);
        public struct DeviceInfo
        {
            public int deviceId { get; set; }
            public string layout { get; set; }
            public UnityEngine.InputSystem.Utilities.FourCC stateFormat { get; set; }
            public int stateSizeInBytes { get; set; }
        }
        public class ReplayController : System.IDisposable
        {
            public System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputDevice> createdDevices { get; }
            public bool finished { get; }
            public bool paused { get; set; }
            public int position { get; }
            public UnityEngine.InputSystem.LowLevel.InputEventTrace trace { get; }
            public virtual void Dispose();
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController OnEvent(System.Action<UnityEngine.InputSystem.LowLevel.InputEventPtr> action);
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController OnFinished(System.Action action);
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController PlayAllEvents();
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController PlayAllEventsAccordingToTimestamps();
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController PlayAllFramesOneByOne();
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController PlayOneEvent();
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController Rewind();
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController WithAllDevicesMappedToNewInstances();
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController WithDeviceMappedFromTo(int recordedDeviceId, int playbackDeviceId);
            public UnityEngine.InputSystem.LowLevel.InputEventTrace.ReplayController WithDeviceMappedFromTo(UnityEngine.InputSystem.InputDevice recordedDevice, UnityEngine.InputSystem.InputDevice playbackDevice);
        }
    }

    public struct InputMetrics
    {
        public float averageEventBytesPerFrame { get; }
        public double averageLagTimePerEvent { get; }
        public double averageProcessingTimePerEvent { get; }
        public int currentControlCount { get; set; }
        public int currentLayoutCount { get; set; }
        public int currentNumDevices { get; set; }
        public int currentStateSizeInBytes { get; set; }
        public int maxNumDevices { get; set; }
        public int maxStateSizeInBytes { get; set; }
        public int totalEventBytes { get; set; }
        public int totalEventCount { get; set; }
        public double totalEventLagTime { get; set; }
        public double totalEventProcessingTime { get; set; }
        public int totalUpdateCount { get; set; }
    }

    [System.Runtime.CompilerServices.Extension] public static class InputState
    {
        public static event System.Action<UnityEngine.InputSystem.InputDevice, UnityEngine.InputSystem.LowLevel.InputEventPtr> onChange;
        public static double currentTime { get; }
        public static UnityEngine.InputSystem.LowLevel.InputUpdateType currentUpdateType { get; }
        public static System.UInt32 updateCount { get; }
        public static void AddChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, long monitorIndex = -1);
        public static UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor AddChangeMonitor(UnityEngine.InputSystem.InputControl control, System.Action<UnityEngine.InputSystem.InputControl, double, UnityEngine.InputSystem.LowLevel.InputEventPtr, long> valueChangeCallback, int monitorIndex = -1, System.Action<UnityEngine.InputSystem.InputControl, double, long, int> timerExpiredCallback = default(System.Action<UnityEngine.InputSystem.InputControl, double, long, int>));
        public static void AddChangeMonitorTimeout(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, double time, long monitorIndex = -1, int timerIndex = -1);
        public static void Change(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType = 0);
        public static void Change<TState>(UnityEngine.InputSystem.InputControl control, TState state, UnityEngine.InputSystem.LowLevel.InputUpdateType updateType = 0, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr = default(UnityEngine.InputSystem.LowLevel.InputEventPtr)) where TState : System.ValueType, new();
        [System.Runtime.CompilerServices.Extension] public static bool IsIntegerFormat(UnityEngine.InputSystem.Utilities.FourCC format);
        public static void RemoveChangeMonitor(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, long monitorIndex = -1);
        public static void RemoveChangeMonitorTimeout(UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor monitor, long monitorIndex = -1, int timerIndex = -1);
    }

    public struct InputStateBlock
    {
        public const System.UInt32 AutomaticOffset = 4294967294;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatBit;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatByte;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatDouble;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatFloat;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatInt;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatLong;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatQuaternion;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatSBit;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatSByte;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatShort;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatUInt;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatULong;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatUShort;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector2;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector2Byte;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector2Short;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector3;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector3Byte;
        public static readonly UnityEngine.InputSystem.Utilities.FourCC FormatVector3Short;
        public const System.UInt32 InvalidOffset = 4294967295;
        public System.UInt32 bitOffset { get; set; }
        public System.UInt32 byteOffset { get; set; }
        public UnityEngine.InputSystem.Utilities.FourCC format { get; set; }
        public System.UInt32 sizeInBits { get; set; }
        public void CopyToFrom(void* toStatePtr, void* fromStatePtr);
        public static UnityEngine.InputSystem.Utilities.FourCC GetPrimitiveFormatFromType(System.Type type);
        public static int GetSizeOfPrimitiveFormatInBits(UnityEngine.InputSystem.Utilities.FourCC type);
        public double ReadDouble(void* statePtr);
        public float ReadFloat(void* statePtr);
        public int ReadInt(void* statePtr);
        public void Write(void* statePtr, UnityEngine.InputSystem.Utilities.PrimitiveValue value);
        public void WriteDouble(void* statePtr, double value);
        public void WriteFloat(void* statePtr, float value);
        public void WriteInt(void* statePtr, int value);
    }

    [System.Reflection.DefaultMember(@"Item")] public class InputStateHistory : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.LowLevel.InputStateHistory.Record>, System.Collections.IEnumerable, System.IDisposable, UnityEngine.InputSystem.LowLevel.IInputStateChangeMonitor
    {
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputControl> controls { get; }
        public virtual int Count { get; }
        public int extraMemoryPerRecord { get; set; }
        public int historyDepth { get; set; }
        public UnityEngine.InputSystem.LowLevel.InputStateHistory.Record this[int index] { get; set; }
        public System.Action<UnityEngine.InputSystem.LowLevel.InputStateHistory.Record> onRecordAdded { get; set; }
        public System.Func<UnityEngine.InputSystem.InputControl, double, UnityEngine.InputSystem.LowLevel.InputEventPtr, bool> onShouldRecordStateChange { get; set; }
        public UnityEngine.InputSystem.LowLevel.InputUpdateType updateMask { get; set; }
        public System.UInt32 version { get; }
        public InputStateHistory(System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.InputControl> controls) {}
        public InputStateHistory(int maxStateSizeInBytes) {}
        public InputStateHistory(string path) {}
        public InputStateHistory(UnityEngine.InputSystem.InputControl control) {}
        public UnityEngine.InputSystem.LowLevel.InputStateHistory.Record AddRecord(UnityEngine.InputSystem.LowLevel.InputStateHistory.Record record);
        protected UnityEngine.InputSystem.LowLevel.InputStateHistory.RecordHeader* AllocateRecord(out int index);
        public void Clear();
        protected void Destroy();
        public virtual void Dispose();
        protected virtual void Finalize();
        public virtual System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.LowLevel.InputStateHistory.Record> GetEnumerator();
        protected UnityEngine.InputSystem.LowLevel.InputStateHistory.RecordHeader* GetRecord(int index);
        protected TValue ReadValue<TValue>(UnityEngine.InputSystem.LowLevel.InputStateHistory.RecordHeader* data) where TValue : System.ValueType, new();
        protected object ReadValueAsObject(UnityEngine.InputSystem.LowLevel.InputStateHistory.RecordHeader* data);
        protected int RecordIndexToUserIndex(int index);
        public UnityEngine.InputSystem.LowLevel.InputStateHistory.Record RecordStateChange(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
        public UnityEngine.InputSystem.LowLevel.InputStateHistory.Record RecordStateChange(UnityEngine.InputSystem.InputControl control, void* statePtr, double time);
        public void StartRecording();
        public void StopRecording();
        protected int UserIndexToRecordIndex(int index);
        public struct Record : System.IEquatable<UnityEngine.InputSystem.LowLevel.InputStateHistory.Record>
        {
            public UnityEngine.InputSystem.InputControl control { get; }
            public int index { get; }
            public UnityEngine.InputSystem.LowLevel.InputStateHistory.Record next { get; }
            public UnityEngine.InputSystem.LowLevel.InputStateHistory owner { get; }
            public UnityEngine.InputSystem.LowLevel.InputStateHistory.Record previous { get; }
            public double time { get; }
            public bool valid { get; }
            public void CopyFrom(UnityEngine.InputSystem.LowLevel.InputStateHistory.Record record);
            public virtual bool Equals(object obj);
            public virtual bool Equals(UnityEngine.InputSystem.LowLevel.InputStateHistory.Record other);
            public virtual int GetHashCode();
            public void* GetUnsafeExtraMemoryPtr();
            public void* GetUnsafeMemoryPtr();
            public TValue ReadValue<TValue>() where TValue : System.ValueType, new();
            public object ReadValueAsObject();
            public virtual string ToString();
        }
        protected struct RecordHeader
        {
            public int controlIndex;
            public const int kSizeWithControlIndex = 16;
            public const int kSizeWithoutControlIndex = 12;
            public double time;
            public System.UInt32 version;
            public byte* statePtrWithControlIndex { get; }
            public byte* statePtrWithoutControlIndex { get; }
        }
    }

    [System.Reflection.DefaultMember(@"Item")] public class InputStateHistory<TValue> : UnityEngine.InputSystem.LowLevel.InputStateHistory, System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>>, System.Collections.Generic.IReadOnlyCollection<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>>, System.Collections.Generic.IReadOnlyList<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>>, System.Collections.IEnumerable where TValue : System.ValueType, new()
    {
        public virtual UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> this[int index] { get; set; }
        public InputStateHistory(System.Nullable<int> maxStateSizeInBytes = default(System.Nullable<int>)) {}
        public InputStateHistory(string path) {}
        public InputStateHistory(UnityEngine.InputSystem.InputControl<TValue> control) {}
        public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> AddRecord(UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> record);
        protected virtual void Finalize();
        public virtual System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>> GetEnumerator();
        public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> RecordStateChange(UnityEngine.InputSystem.InputControl<TValue> control, TValue value, double time = -1);
        public struct Record<TValue> : System.IEquatable<UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue>> where TValue : System.ValueType, new()
        {
            public UnityEngine.InputSystem.InputControl<TValue> control { get; }
            public int index { get; }
            public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> next { get; }
            public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> owner { get; }
            public UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> previous { get; }
            public double time { get; }
            public bool valid { get; }
            public void CopyFrom(UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> record);
            public virtual bool Equals(object obj);
            public virtual bool Equals(UnityEngine.InputSystem.LowLevel.InputStateHistory<TValue> other);
            public virtual int GetHashCode();
            public void* GetUnsafeExtraMemoryPtr();
            public void* GetUnsafeMemoryPtr();
            public TValue ReadValue();
            public virtual string ToString();
        }
    }

    [System.Flags] public enum InputUpdateType
    {
        public const UnityEngine.InputSystem.LowLevel.InputUpdateType BeforeRender = 4;
        public const UnityEngine.InputSystem.LowLevel.InputUpdateType Default = 11;
        public const UnityEngine.InputSystem.LowLevel.InputUpdateType Dynamic = 1;
        public const UnityEngine.InputSystem.LowLevel.InputUpdateType Editor = 8;
        public const UnityEngine.InputSystem.LowLevel.InputUpdateType Fixed = 2;
        public const UnityEngine.InputSystem.LowLevel.InputUpdateType Manual = 16;
        public const UnityEngine.InputSystem.LowLevel.InputUpdateType None = 0;
        public int value__;
    }

    public interface ITextInputReceiver
    {
        public abstract void OnIMECompositionChanged(UnityEngine.InputSystem.LowLevel.IMECompositionString compositionString);
        public abstract void OnTextInput(char character);
    }

    public struct KeyboardState : UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(alias = @"AltGr", bit = 54, displayName = @"Right Alt", layout = @"Key", name = @"rightAlt", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 57, displayName = @"Left System", layout = @"Key", name = @"leftMeta", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], bit = 58, displayName = @"Right System", layout = @"Key", name = @"rightMeta", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 1, displayName = @"Space", layout = @"Key", name = @"space")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 10, displayName = @"\", layout = @"Key", name = @"backslash")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 100, displayName = @"F7", layout = @"Key", name = @"f7")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 101, displayName = @"F8", layout = @"Key", name = @"f8")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 102, displayName = @"F9", layout = @"Key", name = @"f9")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 103, displayName = @"F10", layout = @"Key", name = @"f10")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 104, displayName = @"F11", layout = @"Key", name = @"f11")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 105, displayName = @"F12", layout = @"Key", name = @"f12")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 106, layout = @"Key", name = @"OEM1")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 107, layout = @"Key", name = @"OEM2")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 108, layout = @"Key", name = @"OEM3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 109, layout = @"Key", name = @"OEM4")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 11, displayName = @"[", layout = @"Key", name = @"leftBracket")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 110, layout = @"Key", name = @"OEM5")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 111, layout = @"Button", name = @"IMESelected", synthetic = true)] [UnityEngine.InputSystem.Layouts.InputControl(bit = 12, displayName = @"]", layout = @"Key", name = @"rightBracket")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 13, displayName = @"-", layout = @"Key", name = @"minus")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 14, displayName = @"=", layout = @"Key", name = @"equals")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 15, displayName = @"A", layout = @"Key", name = @"a")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 16, displayName = @"B", layout = @"Key", name = @"b")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 17, displayName = @"C", layout = @"Key", name = @"c")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 18, displayName = @"D", layout = @"Key", name = @"d")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 19, displayName = @"E", layout = @"Key", name = @"e")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 2, displayName = @"Enter", layout = @"Key", name = @"enter", usage = @"Submit")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 20, displayName = @"F", layout = @"Key", name = @"f")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 21, displayName = @"G", layout = @"Key", name = @"g")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 22, displayName = @"H", layout = @"Key", name = @"h")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 23, displayName = @"I", layout = @"Key", name = @"i")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 24, displayName = @"J", layout = @"Key", name = @"j")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 25, displayName = @"K", layout = @"Key", name = @"k")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 26, displayName = @"L", layout = @"Key", name = @"l")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 27, displayName = @"M", layout = @"Key", name = @"m")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 28, displayName = @"N", layout = @"Key", name = @"n")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 29, displayName = @"O", layout = @"Key", name = @"o")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 3, displayName = @"Tab", layout = @"Key", name = @"tab")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 30, displayName = @"P", layout = @"Key", name = @"p")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 31, displayName = @"Q", layout = @"Key", name = @"q")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 32, displayName = @"R", layout = @"Key", name = @"r")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 33, displayName = @"S", layout = @"Key", name = @"s")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 34, displayName = @"T", layout = @"Key", name = @"t")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 35, displayName = @"U", layout = @"Key", name = @"u")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 36, displayName = @"V", layout = @"Key", name = @"v")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 37, displayName = @"W", layout = @"Key", name = @"w")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 38, displayName = @"X", layout = @"Key", name = @"x")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 39, displayName = @"Y", layout = @"Key", name = @"y")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 4, displayName = @"`", layout = @"Key", name = @"backquote")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 40, displayName = @"Z", layout = @"Key", name = @"z")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 41, displayName = @"1", layout = @"Key", name = @"1")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 42, displayName = @"2", layout = @"Key", name = @"2")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 43, displayName = @"3", layout = @"Key", name = @"3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 44, displayName = @"4", layout = @"Key", name = @"4")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 45, displayName = @"5", layout = @"Key", name = @"5")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 46, displayName = @"6", layout = @"Key", name = @"6")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 47, displayName = @"7", layout = @"Key", name = @"7")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 48, displayName = @"8", layout = @"Key", name = @"8")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 49, displayName = @"9", layout = @"Key", name = @"9")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 5, displayName = @"'", layout = @"Key", name = @"quote")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 50, displayName = @"0", layout = @"Key", name = @"0")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 51, displayName = @"Left Shift", layout = @"Key", name = @"leftShift", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 51, displayName = @"Shift", layout = @"DiscreteButton", name = @"shift", parameters = @"minValue=1,maxValue=3", sizeInBits = 2, synthetic = true, usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 52, displayName = @"Right Shift", layout = @"Key", name = @"rightShift", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 53, displayName = @"Alt", layout = @"DiscreteButton", name = @"alt", parameters = @"minValue=1,maxValue=3", sizeInBits = 2, synthetic = true, usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 53, displayName = @"Left Alt", layout = @"Key", name = @"leftAlt", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 55, displayName = @"Control", layout = @"DiscreteButton", name = @"ctrl", parameters = @"minValue=1,maxValue=3", sizeInBits = 2, synthetic = true, usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 55, displayName = @"Left Control", layout = @"Key", name = @"leftCtrl", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 56, displayName = @"Right Control", layout = @"Key", name = @"rightCtrl", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 59, displayName = @"Context Menu", layout = @"Key", name = @"contextMenu", usage = @"Modifier")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 6, displayName = @";", layout = @"Key", name = @"semicolon")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 60, displayName = @"Escape", layout = @"Key", name = @"escape", usages = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.InputSystem.Layouts.InputControl(bit = 61, displayName = @"Left Arrow", layout = @"Key", name = @"leftArrow")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 62, displayName = @"Right Arrow", layout = @"Key", name = @"rightArrow")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 63, displayName = @"Up Arrow", layout = @"Key", name = @"upArrow")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 64, displayName = @"Down Arrow", layout = @"Key", name = @"downArrow")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 65, displayName = @"Backspace", layout = @"Key", name = @"backspace")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 66, displayName = @"Page Down", layout = @"Key", name = @"pageDown")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 67, displayName = @"Page Up", layout = @"Key", name = @"pageUp")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 68, displayName = @"Home", layout = @"Key", name = @"home")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 69, displayName = @"End", layout = @"Key", name = @"end")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 7, displayName = @",", layout = @"Key", name = @"comma")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 70, displayName = @"Insert", layout = @"Key", name = @"insert")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 71, displayName = @"Delete", layout = @"Key", name = @"delete")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 72, displayName = @"Caps Lock", layout = @"Key", name = @"capsLock")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 73, displayName = @"Num Lock", layout = @"Key", name = @"numLock")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 74, displayName = @"Print Screen", layout = @"Key", name = @"printScreen")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 75, displayName = @"Scroll Lock", layout = @"Key", name = @"scrollLock")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 76, displayName = @"Pause/Break", layout = @"Key", name = @"pause")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 77, displayName = @"Numpad Enter", layout = @"Key", name = @"numpadEnter")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 78, displayName = @"Numpad /", layout = @"Key", name = @"numpadDivide")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 79, displayName = @"Numpad *", layout = @"Key", name = @"numpadMultiply")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 8, displayName = @".", layout = @"Key", name = @"period")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 80, displayName = @"Numpad +", layout = @"Key", name = @"numpadPlus")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 81, displayName = @"Numpad -", layout = @"Key", name = @"numpadMinus")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 82, displayName = @"Numpad .", layout = @"Key", name = @"numpadPeriod")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 83, displayName = @"Numpad =", layout = @"Key", name = @"numpadEquals")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 84, displayName = @"Numpad 0", layout = @"Key", name = @"numpad0")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 85, displayName = @"Numpad 1", layout = @"Key", name = @"numpad1")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 86, displayName = @"Numpad 2", layout = @"Key", name = @"numpad2")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 87, displayName = @"Numpad 3", layout = @"Key", name = @"numpad3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 88, displayName = @"Numpad 4", layout = @"Key", name = @"numpad4")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 89, displayName = @"Numpad 5", layout = @"Key", name = @"numpad5")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 9, displayName = @"/", layout = @"Key", name = @"slash")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 90, displayName = @"Numpad 6", layout = @"Key", name = @"numpad6")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 91, displayName = @"Numpad 7", layout = @"Key", name = @"numpad7")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 92, displayName = @"Numpad 8", layout = @"Key", name = @"numpad8")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 93, displayName = @"Numpad 9", layout = @"Key", name = @"numpad9")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 94, displayName = @"F1", layout = @"Key", name = @"f1")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 95, displayName = @"F2", layout = @"Key", name = @"f2")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 96, displayName = @"F3", layout = @"Key", name = @"f3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 97, displayName = @"F4", layout = @"Key", name = @"f4")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 98, displayName = @"F5", layout = @"Key", name = @"f5")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 99, displayName = @"F6", layout = @"Key", name = @"f6")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Any Key", layout = @"AnyKey", name = @"anyKey", sizeInBits = 109, synthetic = true)] public fixed byte keys[14];
        public virtual UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public KeyboardState(params UnityEngine.InputSystem.Key[] pressedKeys) {}
        public void Press(UnityEngine.InputSystem.Key key);
        public void Release(UnityEngine.InputSystem.Key key);
        public void Set(UnityEngine.InputSystem.Key key, bool state);
    }

    public enum MouseButton
    {
        public const UnityEngine.InputSystem.LowLevel.MouseButton Back = 4;
        public const UnityEngine.InputSystem.LowLevel.MouseButton Forward = 3;
        public const UnityEngine.InputSystem.LowLevel.MouseButton Left = 0;
        public const UnityEngine.InputSystem.LowLevel.MouseButton Middle = 2;
        public const UnityEngine.InputSystem.LowLevel.MouseButton Right = 1;
        public int value__;
    }

    public struct MouseState : UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"Left Button", layout = @"Button", name = @"leftButton", shortDisplayName = @"LMB", usage = @"PrimaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 1, displayName = @"Right Button", layout = @"Button", name = @"rightButton", shortDisplayName = @"RMB", usage = @"SecondaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 2, displayName = @"Middle Button", layout = @"Button", name = @"middleButton", shortDisplayName = @"MMB")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 3, displayName = @"Forward", layout = @"Button", name = @"forwardButton", usage = @"Forward")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 4, displayName = @"Back", layout = @"Button", name = @"backButton", usage = @"Back")] [UnityEngine.InputSystem.Layouts.InputControl(format = @"BIT", layout = @"Digital", name = @"pointerId", offset = 4294967294, sizeInBits = 1)] [UnityEngine.InputSystem.Layouts.InputControl(format = @"FLT", layout = @"Axis", name = @"pressure", offset = 4294967294, sizeInBits = 32, usage = @"Pressure")] [UnityEngine.InputSystem.Layouts.InputControl(format = @"VEC2", layout = @"Vector2", name = @"radius", offset = 4294967294, sizeInBits = 64, usage = @"Radius")] [UnityEngine.InputSystem.Layouts.InputControl(name = @"press", synthetic = true, usages = Mono.Cecil.CustomAttributeArgument[], useStateFrom = @"leftButton")] public System.UInt16 buttons;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Click Count", layout = @"Integer", synthetic = true)] public System.UInt16 clickCount;
        [UnityEngine.InputSystem.Layouts.InputControl(usage = @"Secondary2DMotion")] public UnityEngine.Vector2 delta;
        [UnityEngine.InputSystem.Layouts.InputControl(usage = @"Point")] public UnityEngine.Vector2 position;
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], displayName = @"Left/Right", name = @"scroll/x", usage = @"ScrollHorizontal")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], displayName = @"Up/Down", name = @"scroll/y", shortDisplayName = @"Wheel", usage = @"ScrollVertical")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Scroll")] public UnityEngine.Vector2 scroll;
        public virtual UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public UnityEngine.InputSystem.LowLevel.MouseState WithButton(UnityEngine.InputSystem.LowLevel.MouseButton button, bool state = True);
    }

    public struct PenState : UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(alias = @"barrelFirst", bit = 2, displayName = @"Barrel Button #1", layout = @"Button", name = @"barrel1", usage = @"SecondaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(alias = @"barrelFourth", bit = 6, displayName = @"Barrel Button #4", layout = @"Button", name = @"barrel4")] [UnityEngine.InputSystem.Layouts.InputControl(alias = @"barrelSecond", bit = 3, displayName = @"Barrel Button #2", layout = @"Button", name = @"barrel2")] [UnityEngine.InputSystem.Layouts.InputControl(alias = @"barrelThird", bit = 5, displayName = @"Barrel Button #3", layout = @"Button", name = @"barrel3")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"Tip", layout = @"Button", name = @"tip", usage = @"PrimaryAction")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 1, displayName = @"Eraser", layout = @"Button", name = @"eraser")] [UnityEngine.InputSystem.Layouts.InputControl(bit = 4, displayName = @"In Range?", layout = @"Button", name = @"inRange", synthetic = true)] [UnityEngine.InputSystem.Layouts.InputControl(format = @"UINT", layout = @"Digital", name = @"pointerId", offset = 4294967294, sizeInBits = 32)] [UnityEngine.InputSystem.Layouts.InputControl(format = @"VEC2", layout = @"Vector2", name = @"radius", offset = 4294967294, sizeInBits = 64, usage = @"Radius")] [UnityEngine.InputSystem.Layouts.InputControl(name = @"press", synthetic = true, usages = Mono.Cecil.CustomAttributeArgument[], useStateFrom = @"tip")] public System.UInt16 buttons;
        [UnityEngine.InputSystem.Layouts.InputControl(usage = @"Secondary2DMotion")] public UnityEngine.Vector2 delta;
        [UnityEngine.InputSystem.Layouts.InputControl(usage = @"Point")] public UnityEngine.Vector2 position;
        [UnityEngine.InputSystem.Layouts.InputControl(defaultState = 0, layout = @"Analog", usage = @"Pressure")] public float pressure;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Tilt", layout = @"Vector2", usage = @"Tilt")] public UnityEngine.Vector2 tilt;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Twist", layout = @"Axis", usage = @"Twist")] public float twist;
        public virtual UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public UnityEngine.InputSystem.LowLevel.PenState WithButton(UnityEngine.InputSystem.PenButton button, bool state = True);
    }

    public struct QueryCanRunInBackground : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public bool canRunInBackground;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.QueryCanRunInBackground Create();
    }

    public struct QueryDimensionsCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public UnityEngine.Vector2 outDimensions;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.QueryDimensionsCommand Create();
    }

    public struct QueryEnabledStateCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public bool isEnabled;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.QueryEnabledStateCommand Create();
    }

    public struct QueryKeyboardLayoutCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public fixed byte nameBuffer[256];
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.QueryKeyboardLayoutCommand Create();
        public string ReadLayoutName();
        public void WriteLayoutName(string name);
    }

    public struct QueryKeyNameCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public fixed byte nameBuffer[256];
        public int scanOrKeyCode;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.QueryKeyNameCommand Create(UnityEngine.InputSystem.Key key);
        public string ReadKeyName();
    }

    public struct QueryPairedUserAccountCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public System.UInt64 handle;
        public string id { get; set; }
        public string name { get; set; }
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.QueryPairedUserAccountCommand Create();
        [System.Flags] public enum Result
        {
            public const UnityEngine.InputSystem.LowLevel.QueryPairedUserAccountCommand.Result DevicePairedToUserAccount = 2;
            public const UnityEngine.InputSystem.LowLevel.QueryPairedUserAccountCommand.Result UserAccountSelectionCanceled = 16;
            public const UnityEngine.InputSystem.LowLevel.QueryPairedUserAccountCommand.Result UserAccountSelectionComplete = 8;
            public const UnityEngine.InputSystem.LowLevel.QueryPairedUserAccountCommand.Result UserAccountSelectionInProgress = 4;
            public long value__;
        }
    }

    public struct RequestResetCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.RequestResetCommand Create();
    }

    public struct RequestSyncCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.RequestSyncCommand Create();
    }

    public struct SetIMECursorPositionCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public UnityEngine.Vector2 position { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.SetIMECursorPositionCommand Create(UnityEngine.Vector2 cursorPosition);
    }

    public struct SetSamplingFrequencyCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputDeviceCommand baseCommand;
        public float frequency;
        public static UnityEngine.InputSystem.Utilities.FourCC Type { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.SetSamplingFrequencyCommand Create(float frequency);
    }

    public struct StateEvent : UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent;
        public UnityEngine.InputSystem.Utilities.FourCC stateFormat;
        public const int Type = 1398030676;
        public void* state { get; }
        public System.UInt32 stateSizeInBytes { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.StateEvent* From(UnityEngine.InputSystem.LowLevel.InputEventPtr ptr);
        public static Unity.Collections.NativeArray<byte> From(UnityEngine.InputSystem.InputDevice device, out UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, Unity.Collections.Allocator allocator = 2);
        public static int GetEventSizeWithPayload<TState>() where TState : System.ValueType, new();
        public UnityEngine.InputSystem.LowLevel.InputEventPtr ToEventPtr();
    }

    public struct TextEvent : UnityEngine.InputSystem.LowLevel.IInputEventTypeInfo
    {
        public UnityEngine.InputSystem.LowLevel.InputEvent baseEvent;
        public int character;
        public const int Type = 1413830740;
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.LowLevel.TextEvent Create(int deviceId, char character, double time = -1);
        public static UnityEngine.InputSystem.LowLevel.TextEvent Create(int deviceId, int character, double time = -1);
        public static UnityEngine.InputSystem.LowLevel.TextEvent* From(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr);
    }

    public struct TouchState : UnityEngine.InputSystem.LowLevel.IInputStateTypeInfo
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Delta")] public UnityEngine.Vector2 delta;
        [UnityEngine.InputSystem.Layouts.InputControl(bit = 0, displayName = @"Indirect Touch?", layout = @"Button", name = @"indirectTouch", synthetic = true)] [UnityEngine.InputSystem.Layouts.InputControl(bit = 5, displayName = @"Tap", layout = @"Button", name = @"tap")] public byte flags;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Touch Contact?", layout = @"TouchPress", name = @"press", useStateFrom = @"phase")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Touch Phase", layout = @"TouchPhase", name = @"phase", synthetic = true)] public byte phaseId;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Position")] public UnityEngine.Vector2 position;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Pressure", layout = @"Axis")] public float pressure;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Radius")] public UnityEngine.Vector2 radius;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Start Position", synthetic = true)] public UnityEngine.Vector2 startPosition;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Start Time", layout = @"Double", synthetic = true)] public double startTime;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Tap Count", layout = @"Integer", name = @"tapCount")] public byte tapCount;
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Touch ID", layout = @"Integer", synthetic = true)] public int touchId;
        public virtual UnityEngine.InputSystem.Utilities.FourCC format { get; }
        public static UnityEngine.InputSystem.Utilities.FourCC Format { get; }
        public bool isIndirectTouch { get; set; }
        public bool isInProgress { get; }
        public bool isNoneEndedOrCanceled { get; }
        public bool isPrimaryTouch { get; set; }
        public bool isTap { get; set; }
        public UnityEngine.InputSystem.TouchPhase phase { get; set; }
        public virtual string ToString();
    }
}

namespace UnityEngine.InputSystem.OnScreen
{
    [UnityEngine.AddComponentMenu(@"Input/On-Screen Button")] public class OnScreenButton : UnityEngine.InputSystem.OnScreen.OnScreenControl, UnityEngine.EventSystems.IEventSystemHandler, UnityEngine.EventSystems.IPointerDownHandler, UnityEngine.EventSystems.IPointerUpHandler
    {
        protected virtual string controlPathInternal { get; set; }
        public OnScreenButton() {}
        public virtual void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData);
        public virtual void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData);
    }

    public abstract class OnScreenControl : UnityEngine.MonoBehaviour
    {
        public UnityEngine.InputSystem.InputControl control { get; }
        public string controlPath { get; set; }
        protected abstract string controlPathInternal { get; set; }
        protected OnScreenControl() {}
        protected void SendValueToControl<TValue>(TValue value) where TValue : System.ValueType, new();
    }

    [UnityEngine.AddComponentMenu(@"Input/On-Screen Stick")] public class OnScreenStick : UnityEngine.InputSystem.OnScreen.OnScreenControl, UnityEngine.EventSystems.IDragHandler, UnityEngine.EventSystems.IEventSystemHandler, UnityEngine.EventSystems.IPointerDownHandler, UnityEngine.EventSystems.IPointerUpHandler
    {
        protected virtual string controlPathInternal { get; set; }
        public float movementRange { get; set; }
        public OnScreenStick() {}
        public virtual void OnDrag(UnityEngine.EventSystems.PointerEventData eventData);
        public virtual void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData);
        public virtual void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData);
    }
}

namespace UnityEngine.InputSystem.Processors
{
    [UnityEngine.Scripting.Preserve] public class ScaleVector2Processor : UnityEngine.InputSystem.InputProcessor<UnityEngine.Vector2>
    {
        [UnityEngine.Tooltip(@"Scale factor to multiple the incoming Vector2's X component by.")] public float x;
        [UnityEngine.Tooltip(@"Scale factor to multiple the incoming Vector2's Y component by.")] public float y;
        public ScaleVector2Processor() {}
        public virtual UnityEngine.Vector2 Process(UnityEngine.Vector2 value, UnityEngine.InputSystem.InputControl control);
    }

    [UnityEngine.Scripting.Preserve] public class ScaleVector3Processor : UnityEngine.InputSystem.InputProcessor<UnityEngine.Vector3>
    {
        public float x;
        public float y;
        public float z;
        public ScaleVector3Processor() {}
        public virtual UnityEngine.Vector3 Process(UnityEngine.Vector3 value, UnityEngine.InputSystem.InputControl control);
    }

    [UnityEngine.Scripting.Preserve] public class StickDeadzoneProcessor : UnityEngine.InputSystem.InputProcessor<UnityEngine.Vector2>
    {
        public float max;
        public float min;
        public StickDeadzoneProcessor() {}
        public virtual UnityEngine.Vector2 Process(UnityEngine.Vector2 value, UnityEngine.InputSystem.InputControl control = default(UnityEngine.InputSystem.InputControl));
    }
}

namespace UnityEngine.InputSystem.Switch
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Switch Pro Controller", stateType = typeof(UnityEngine.InputSystem.Switch.LowLevel.SwitchProControllerHIDInputState))] [UnityEngine.Scripting.Preserve] public class SwitchProControllerHID : UnityEngine.InputSystem.Gamepad
    {
        public SwitchProControllerHID() {}
    }
}

namespace UnityEngine.InputSystem.UI
{
    public class ExtendedPointerEventData : UnityEngine.EventSystems.PointerEventData
    {
        public UnityEngine.InputSystem.InputDevice device { get; set; }
        public UnityEngine.InputSystem.UI.UIPointerType pointerType { get; set; }
        public int touchId { get; set; }
        public UnityEngine.Quaternion trackedDeviceOrientation { get; set; }
        public UnityEngine.Vector3 trackedDevicePosition { get; set; }
        public ExtendedPointerEventData(UnityEngine.EventSystems.EventSystem eventSystem) {}
        public virtual string ToString();
    }

    public class InputSystemUIInputModule : UnityEngine.EventSystems.BaseInputModule
    {
        public UnityEngine.InputSystem.InputActionAsset actionsAsset { get; set; }
        public UnityEngine.InputSystem.InputActionReference cancel { get; set; }
        public bool deselectOnBackgroundClick { get; set; }
        public UnityEngine.InputSystem.InputActionReference leftClick { get; set; }
        public UnityEngine.InputSystem.InputActionReference middleClick { get; set; }
        public UnityEngine.InputSystem.InputActionReference move { get; set; }
        public float moveRepeatDelay { get; set; }
        public float moveRepeatRate { get; set; }
        public UnityEngine.InputSystem.InputActionReference point { get; set; }
        public UnityEngine.InputSystem.UI.UIPointerBehavior pointerBehavior { get; set; }
        [System.Obsolete(@"'repeatDelay' has been obsoleted; use 'moveRepeatDelay' instead. (UnityUpgradable) -> moveRepeatDelay", false)] public float repeatDelay { get; set; }
        [System.Obsolete(@"'repeatRate' has been obsoleted; use 'moveRepeatRate' instead. (UnityUpgradable) -> moveRepeatRate", false)] public float repeatRate { get; set; }
        public UnityEngine.InputSystem.InputActionReference rightClick { get; set; }
        public UnityEngine.InputSystem.InputActionReference scrollWheel { get; set; }
        public UnityEngine.InputSystem.InputActionReference submit { get; set; }
        public float trackedDeviceDragThresholdMultiplier { get; set; }
        public UnityEngine.InputSystem.InputActionReference trackedDeviceOrientation { get; set; }
        public UnityEngine.InputSystem.InputActionReference trackedDevicePosition { get; set; }
        [System.Obsolete(@"'trackedDeviceSelect' has been obsoleted; use 'leftClick' instead.", true)] public UnityEngine.InputSystem.InputActionReference trackedDeviceSelect { get; set; }
        public InputSystemUIInputModule() {}
        public virtual void ActivateModule();
        protected virtual void Awake();
        public virtual bool IsPointerOverGameObject(int pointerOrTouchId);
        protected virtual void OnDestroy();
        protected virtual void OnDisable();
        protected virtual void OnEnable();
        public virtual void Process();
    }

    public class MultiplayerEventSystem : UnityEngine.EventSystems.EventSystem
    {
        public UnityEngine.GameObject playerRoot { get; set; }
        public MultiplayerEventSystem() {}
        protected virtual void Update();
    }

    [UnityEngine.AddComponentMenu(@"Event/Tracked Device Raycaster")] [UnityEngine.RequireComponent(typeof(UnityEngine.Canvas))] public class TrackedDeviceRaycaster : UnityEngine.EventSystems.BaseRaycaster
    {
        public UnityEngine.LayerMask blockingMask { get; set; }
        public bool checkFor2DOcclusion { get; set; }
        public bool checkFor3DOcclusion { get; set; }
        public virtual UnityEngine.Camera eventCamera { get; }
        public bool ignoreReversedGraphics { get; set; }
        public float maxDistance { get; set; }
        public TrackedDeviceRaycaster() {}
        protected virtual void OnDisable();
        protected virtual void OnEnable();
        public virtual void Raycast(UnityEngine.EventSystems.PointerEventData eventData, System.Collections.Generic.List<UnityEngine.EventSystems.RaycastResult> resultAppendList);
    }

    public enum UIPointerBehavior
    {
        public const UnityEngine.InputSystem.UI.UIPointerBehavior AllPointersAsIs = 2;
        public const UnityEngine.InputSystem.UI.UIPointerBehavior SingleMouseOrPenButMultiTouchAndTrack = 0;
        public const UnityEngine.InputSystem.UI.UIPointerBehavior SingleUnifiedPointer = 1;
        public int value__;
    }

    public enum UIPointerType
    {
        public const UnityEngine.InputSystem.UI.UIPointerType MouseOrPen = 1;
        public const UnityEngine.InputSystem.UI.UIPointerType None = 0;
        public const UnityEngine.InputSystem.UI.UIPointerType Touch = 2;
        public const UnityEngine.InputSystem.UI.UIPointerType Tracked = 3;
        public int value__;
    }
}

namespace UnityEngine.InputSystem.Users
{
    public struct InputUser : System.IEquatable<UnityEngine.InputSystem.Users.InputUser>
    {
        public const System.UInt32 InvalidId = 0;
        public static event System.Action<UnityEngine.InputSystem.Users.InputUser, UnityEngine.InputSystem.Users.InputUserChange, UnityEngine.InputSystem.InputDevice> onChange;
        public static event System.Action<UnityEngine.InputSystem.InputControl, UnityEngine.InputSystem.LowLevel.InputEventPtr> onUnpairedDeviceUsed;
        public UnityEngine.InputSystem.IInputActionCollection actions { get; }
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Users.InputUser> all { get; }
        public System.Nullable<UnityEngine.InputSystem.InputControlScheme> controlScheme { get; }
        public UnityEngine.InputSystem.InputControlScheme.MatchResult controlSchemeMatch { get; }
        public bool hasMissingRequiredDevices { get; }
        public System.UInt32 id { get; }
        public int index { get; }
        public static int listenForUnpairedDeviceActivity { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputDevice> lostDevices { get; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.InputDevice> pairedDevices { get; }
        public System.Nullable<UnityEngine.InputSystem.Users.InputUserAccountHandle> platformUserAccountHandle { get; }
        public string platformUserAccountId { get; }
        public string platformUserAccountName { get; }
        public bool valid { get; }
        public UnityEngine.InputSystem.Users.InputUser.ControlSchemeChangeSyntax ActivateControlScheme(string schemeName);
        public UnityEngine.InputSystem.Users.InputUser.ControlSchemeChangeSyntax ActivateControlScheme(UnityEngine.InputSystem.InputControlScheme scheme);
        public void AssociateActionsWithUser(UnityEngine.InputSystem.IInputActionCollection actions);
        public static UnityEngine.InputSystem.Users.InputUser CreateUserWithoutPairedDevices();
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.Users.InputUser other);
        public static System.Nullable<UnityEngine.InputSystem.Users.InputUser> FindUserByAccount(UnityEngine.InputSystem.Users.InputUserAccountHandle platformUserAccountHandle);
        public static System.Nullable<UnityEngine.InputSystem.Users.InputUser> FindUserPairedToDevice(UnityEngine.InputSystem.InputDevice device);
        public virtual int GetHashCode();
        public static UnityEngine.InputSystem.InputControlList<UnityEngine.InputSystem.InputDevice> GetUnpairedInputDevices();
        public static int GetUnpairedInputDevices(ref UnityEngine.InputSystem.InputControlList<UnityEngine.InputSystem.InputDevice> list);
        public static bool operator ==(UnityEngine.InputSystem.Users.InputUser left, UnityEngine.InputSystem.Users.InputUser right);
        public static bool operator !=(UnityEngine.InputSystem.Users.InputUser left, UnityEngine.InputSystem.Users.InputUser right);
        public static UnityEngine.InputSystem.Users.InputUser PerformPairingWithDevice(UnityEngine.InputSystem.InputDevice device, UnityEngine.InputSystem.Users.InputUser user = default(UnityEngine.InputSystem.Users.InputUser), UnityEngine.InputSystem.Users.InputUserPairingOptions options = 0);
        public void UnpairDevice(UnityEngine.InputSystem.InputDevice device);
        public void UnpairDevices();
        public void UnpairDevicesAndRemoveUser();
        public struct ControlSchemeChangeSyntax
        {
            public UnityEngine.InputSystem.Users.InputUser.ControlSchemeChangeSyntax AndPairRemainingDevices();
        }
    }

    public struct InputUserAccountHandle : System.IEquatable<UnityEngine.InputSystem.Users.InputUserAccountHandle>
    {
        public string apiName { get; }
        public System.UInt64 handle { get; }
        public InputUserAccountHandle(string apiName, System.UInt64 handle) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.Users.InputUserAccountHandle other);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.InputSystem.Users.InputUserAccountHandle left, UnityEngine.InputSystem.Users.InputUserAccountHandle right);
        public static bool operator !=(UnityEngine.InputSystem.Users.InputUserAccountHandle left, UnityEngine.InputSystem.Users.InputUserAccountHandle right);
        public virtual string ToString();
    }

    public enum InputUserChange
    {
        public const UnityEngine.InputSystem.Users.InputUserChange AccountChanged = 6;
        public const UnityEngine.InputSystem.Users.InputUserChange AccountNameChanged = 7;
        public const UnityEngine.InputSystem.Users.InputUserChange AccountSelectionCanceled = 9;
        public const UnityEngine.InputSystem.Users.InputUserChange AccountSelectionComplete = 10;
        public const UnityEngine.InputSystem.Users.InputUserChange AccountSelectionInProgress = 8;
        public const UnityEngine.InputSystem.Users.InputUserChange Added = 0;
        public const UnityEngine.InputSystem.Users.InputUserChange ControlsChanged = 12;
        public const UnityEngine.InputSystem.Users.InputUserChange ControlSchemeChanged = 11;
        public const UnityEngine.InputSystem.Users.InputUserChange DeviceLost = 4;
        public const UnityEngine.InputSystem.Users.InputUserChange DevicePaired = 2;
        public const UnityEngine.InputSystem.Users.InputUserChange DeviceRegained = 5;
        public const UnityEngine.InputSystem.Users.InputUserChange DeviceUnpaired = 3;
        public const UnityEngine.InputSystem.Users.InputUserChange Removed = 1;
        public int value__;
    }

    [System.Flags] public enum InputUserPairingOptions
    {
        public const UnityEngine.InputSystem.Users.InputUserPairingOptions ForceNoPlatformUserAccountSelection = 2;
        public const UnityEngine.InputSystem.Users.InputUserPairingOptions ForcePlatformUserAccountSelection = 1;
        public const UnityEngine.InputSystem.Users.InputUserPairingOptions None = 0;
        public const UnityEngine.InputSystem.Users.InputUserPairingOptions UnpairCurrentDevicesFromUser = 8;
        public int value__;
    }
}

namespace UnityEngine.InputSystem.Utilities
{
    [System.AttributeUsage(4, Inherited = true)] public class DisplayStringFormatAttribute : System.Attribute
    {
        public string formatString { get; set; }
        public DisplayStringFormatAttribute(string formatString) {}
    }

    public struct FourCC : System.IEquatable<UnityEngine.InputSystem.Utilities.FourCC>
    {
        public FourCC(int code) {}
        public FourCC(string str) {}
        public FourCC(char a, char b =  , char c =  , char d =  ) {}
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.Utilities.FourCC other);
        public static UnityEngine.InputSystem.Utilities.FourCC FromInt32(int i);
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.InputSystem.Utilities.FourCC left, UnityEngine.InputSystem.Utilities.FourCC right);
        public static int op_Implicit(UnityEngine.InputSystem.Utilities.FourCC fourCC);
        public static UnityEngine.InputSystem.Utilities.FourCC op_Implicit(int i);
        public static bool operator !=(UnityEngine.InputSystem.Utilities.FourCC left, UnityEngine.InputSystem.Utilities.FourCC right);
        public static int ToInt32(UnityEngine.InputSystem.Utilities.FourCC fourCC);
        public virtual string ToString();
    }

    public sealed class InputActionTrace : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.Utilities.InputActionTrace.ActionEventPtr>, System.Collections.IEnumerable, System.IDisposable
    {
        public UnityEngine.InputSystem.LowLevel.InputEventBuffer buffer { get; }
        public int count { get; }
        public InputActionTrace() {}
        public InputActionTrace(UnityEngine.InputSystem.InputAction action) {}
        public InputActionTrace(UnityEngine.InputSystem.InputActionMap actionMap) {}
        public void Clear();
        public virtual void Dispose();
        protected virtual void Finalize();
        public virtual System.Collections.Generic.IEnumerator<UnityEngine.InputSystem.Utilities.InputActionTrace.ActionEventPtr> GetEnumerator();
        public void RecordAction(UnityEngine.InputSystem.InputAction.CallbackContext context);
        public void SubscribeTo(UnityEngine.InputSystem.InputAction action);
        public void SubscribeTo(UnityEngine.InputSystem.InputActionMap actionMap);
        public void SubscribeToAll();
        public virtual string ToString();
        public void UnsubscribeFrom(UnityEngine.InputSystem.InputAction action);
        public void UnsubscribeFrom(UnityEngine.InputSystem.InputActionMap actionMap);
        public void UnsubscribeFromAll();
        public struct ActionEventPtr
        {
            public UnityEngine.InputSystem.InputAction action { get; }
            public UnityEngine.InputSystem.InputControl control { get; }
            public double duration { get; }
            public UnityEngine.InputSystem.IInputInteraction interaction { get; }
            public UnityEngine.InputSystem.InputActionPhase phase { get; }
            public double startTime { get; }
            public double time { get; }
            public int valueSizeInBytes { get; }
            public TValue ReadValue<TValue>() where TValue : System.ValueType, new();
            public void ReadValue(void* buffer, int bufferSize);
            public object ReadValueAsObject();
            public virtual string ToString();
        }
    }

    public struct InternedString : System.IComparable<UnityEngine.InputSystem.Utilities.InternedString>, System.IEquatable<UnityEngine.InputSystem.Utilities.InternedString>
    {
        public int length { get; }
        public InternedString(string text) {}
        public virtual int CompareTo(UnityEngine.InputSystem.Utilities.InternedString other);
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.Utilities.InternedString other);
        public virtual int GetHashCode();
        public bool IsEmpty();
        public static bool operator ==(string a, UnityEngine.InputSystem.Utilities.InternedString b);
        public static bool operator ==(UnityEngine.InputSystem.Utilities.InternedString a, string b);
        public static bool operator ==(UnityEngine.InputSystem.Utilities.InternedString a, UnityEngine.InputSystem.Utilities.InternedString b);
        public static bool operator >(UnityEngine.InputSystem.Utilities.InternedString left, UnityEngine.InputSystem.Utilities.InternedString right);
        public static string op_Implicit(UnityEngine.InputSystem.Utilities.InternedString str);
        public static bool operator !=(string a, UnityEngine.InputSystem.Utilities.InternedString b);
        public static bool operator !=(UnityEngine.InputSystem.Utilities.InternedString a, string b);
        public static bool operator !=(UnityEngine.InputSystem.Utilities.InternedString a, UnityEngine.InputSystem.Utilities.InternedString b);
        public static bool operator <(UnityEngine.InputSystem.Utilities.InternedString left, UnityEngine.InputSystem.Utilities.InternedString right);
        public string ToLower();
        public virtual string ToString();
    }

    public struct NameAndParameters
    {
        public string name { get; set; }
        public UnityEngine.InputSystem.Utilities.ReadOnlyArray<UnityEngine.InputSystem.Utilities.NamedValue> parameters { get; set; }
        public static UnityEngine.InputSystem.Utilities.NameAndParameters Parse(string text);
        public static System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.Utilities.NameAndParameters> ParseMultiple(string text);
        public virtual string ToString();
    }

    public struct NamedValue : System.IEquatable<UnityEngine.InputSystem.Utilities.NamedValue>
    {
        public const string Separator = ,;
        public string name { get; set; }
        public System.TypeCode type { get; }
        public UnityEngine.InputSystem.Utilities.PrimitiveValue value { get; set; }
        public static void ApplyAllToObject<TParameterList>(object instance, TParameterList parameters) where TParameterList : System.Collections.Generic.IEnumerable<UnityEngine.InputSystem.Utilities.NamedValue>;
        public void ApplyToObject(object instance);
        public UnityEngine.InputSystem.Utilities.NamedValue ConvertTo(System.TypeCode type);
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.Utilities.NamedValue other);
        public static UnityEngine.InputSystem.Utilities.NamedValue From<TValue>(string name, TValue value) where TValue : System.ValueType, new();
        public virtual int GetHashCode();
        public static bool operator ==(UnityEngine.InputSystem.Utilities.NamedValue left, UnityEngine.InputSystem.Utilities.NamedValue right);
        public static bool operator !=(UnityEngine.InputSystem.Utilities.NamedValue left, UnityEngine.InputSystem.Utilities.NamedValue right);
        public static UnityEngine.InputSystem.Utilities.NamedValue Parse(string str);
        public static UnityEngine.InputSystem.Utilities.NamedValue[] ParseMultiple(string parameterString);
        public virtual string ToString();
    }

    public struct PrimitiveValue : System.IConvertible, System.IEquatable<UnityEngine.InputSystem.Utilities.PrimitiveValue>
    {
        public bool isEmpty { get; }
        public System.TypeCode type { get; }
        public PrimitiveValue(bool value) {}
        public PrimitiveValue(byte value) {}
        public PrimitiveValue(char value) {}
        public PrimitiveValue(double value) {}
        public PrimitiveValue(short value) {}
        public PrimitiveValue(int value) {}
        public PrimitiveValue(long value) {}
        public PrimitiveValue(System.SByte value) {}
        public PrimitiveValue(float value) {}
        public PrimitiveValue(System.UInt16 value) {}
        public PrimitiveValue(System.UInt32 value) {}
        public PrimitiveValue(System.UInt64 value) {}
        public UnityEngine.InputSystem.Utilities.PrimitiveValue ConvertTo(System.TypeCode type);
        public virtual bool Equals(object obj);
        public virtual bool Equals(UnityEngine.InputSystem.Utilities.PrimitiveValue other);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue From<TValue>(TValue value) where TValue : System.ValueType, new();
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromBoolean(bool value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromByte(byte value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromChar(char value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromDouble(double value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromInt16(short value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromInt32(int value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromInt64(long value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromObject(object value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromSByte(System.SByte value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromSingle(float value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromString(string value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromUInt16(System.UInt16 value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromUInt32(System.UInt32 value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue FromUInt64(System.UInt64 value);
        public virtual int GetHashCode();
        public virtual System.TypeCode GetTypeCode();
        public static bool operator ==(UnityEngine.InputSystem.Utilities.PrimitiveValue left, UnityEngine.InputSystem.Utilities.PrimitiveValue right);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(bool value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(byte value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(char value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(double value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(short value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(int value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(long value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(System.SByte value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(float value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(System.UInt16 value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(System.UInt32 value);
        public static UnityEngine.InputSystem.Utilities.PrimitiveValue op_Implicit(System.UInt64 value);
        public static bool operator !=(UnityEngine.InputSystem.Utilities.PrimitiveValue left, UnityEngine.InputSystem.Utilities.PrimitiveValue right);
        public virtual bool ToBoolean(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual byte ToByte(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual char ToChar(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual System.DateTime ToDateTime(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual System.Decimal ToDecimal(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual double ToDouble(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual short ToInt16(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual int ToInt32(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual long ToInt64(System.IFormatProvider provider = default(System.IFormatProvider));
        public object ToObject();
        public virtual System.SByte ToSByte(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual float ToSingle(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual string ToString();
        public virtual string ToString(System.IFormatProvider provider);
        public virtual object ToType(System.Type conversionType, System.IFormatProvider provider);
        public virtual System.UInt16 ToUInt16(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual System.UInt32 ToUInt32(System.IFormatProvider provider = default(System.IFormatProvider));
        public virtual System.UInt64 ToUInt64(System.IFormatProvider provider = default(System.IFormatProvider));
    }

    [System.Reflection.DefaultMember(@"Item")] public struct ReadOnlyArray<TValue> : System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.IReadOnlyCollection<TValue>, System.Collections.Generic.IReadOnlyList<TValue>, System.Collections.IEnumerable
    {
        public virtual int Count { get; }
        public virtual TValue this[int index] { get; }
        public ReadOnlyArray(TValue[] array) {}
        public ReadOnlyArray(TValue[] array, int index, int length) {}
        public virtual System.Collections.Generic.IEnumerator<TValue> GetEnumerator();
        public int IndexOf(System.Predicate<TValue> predicate);
        public static UnityEngine.InputSystem.Utilities.ReadOnlyArray<TValue> op_Implicit(TValue[] array);
        public TValue[] ToArray();
    }

    [System.Runtime.CompilerServices.Extension] public static class ReadOnlyArrayExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static bool Contains<TValue>(UnityEngine.InputSystem.Utilities.ReadOnlyArray<TValue> array, TValue value) where TValue : System.IComparable<TValue>;
        [System.Runtime.CompilerServices.Extension] public static bool ContainsReference<TValue>(UnityEngine.InputSystem.Utilities.ReadOnlyArray<TValue> array, TValue value) where TValue : class;
        [System.Runtime.CompilerServices.Extension] public static int IndexOfReference<TValue>(UnityEngine.InputSystem.Utilities.ReadOnlyArray<TValue> array, TValue value) where TValue : class;
    }

    public struct Vector2MagnitudeComparer : System.Collections.Generic.IComparer<UnityEngine.Vector2>
    {
        public virtual int Compare(UnityEngine.Vector2 x, UnityEngine.Vector2 y);
    }

    public struct Vector3MagnitudeComparer : System.Collections.Generic.IComparer<UnityEngine.Vector3>
    {
        public virtual int Compare(UnityEngine.Vector3 x, UnityEngine.Vector3 y);
    }
}

namespace UnityEngine.InputSystem.WebGL
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"WebGL Gamepad ("standard" mapping)", stateType = typeof(UnityEngine.InputSystem.WebGL.LowLevel.WebGLGamepadState))] [UnityEngine.Scripting.Preserve] public class WebGLGamepad : UnityEngine.InputSystem.Gamepad
    {
        public WebGLGamepad() {}
    }

    [UnityEngine.Scripting.Preserve] public class WebGLJoystick : UnityEngine.InputSystem.Joystick
    {
        public WebGLJoystick() {}
    }
}

namespace UnityEngine.InputSystem.XInput
{
    public interface IXboxOneRumble : UnityEngine.InputSystem.Haptics.IDualMotorRumble, UnityEngine.InputSystem.Haptics.IHaptics
    {
        public abstract void SetMotorSpeeds(float lowFrequency, float highFrequency, float leftTrigger, float rightTrigger);
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Xbox Controller")] [UnityEngine.Scripting.Preserve] public class XInputController : UnityEngine.InputSystem.Gamepad
    {
        public UnityEngine.InputSystem.XInput.XInputController.DeviceFlags flags { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(alias = @"menu", displayName = @"Menu", name = @"start")] [UnityEngine.InputSystem.Layouts.InputControl(alias = @"view", displayName = @"View", name = @"select")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"A", name = @"buttonSouth")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"B", name = @"buttonEast")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Left Bumper", name = @"leftShoulder", shortDisplayName = @"LB")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Right Bumper", name = @"rightShoulder", shortDisplayName = @"RB")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"X", name = @"buttonWest")] [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Y", name = @"buttonNorth")] [UnityEngine.InputSystem.Layouts.InputControl(name = @"leftTrigger", shortDisplayName = @"LT")] [UnityEngine.InputSystem.Layouts.InputControl(name = @"rightTrigger", shortDisplayName = @"RT")] public UnityEngine.InputSystem.Controls.ButtonControl menu { get; }
        public UnityEngine.InputSystem.XInput.XInputController.DeviceSubType subType { get; }
        public UnityEngine.InputSystem.Controls.ButtonControl view { get; }
        public XInputController() {}
        protected virtual void FinishSetup();
        [System.Flags] public enum DeviceFlags
        {
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceFlags ForceFeedbackSupported = 1;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceFlags NoNavigation = 16;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceFlags PluginModulesSupported = 8;
            public int value__;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceFlags VoiceSupported = 4;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceFlags Wireless = 2;
        }
        public enum DeviceSubType
        {
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType ArcadePad = 19;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType ArcadeStick = 3;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType DancePad = 5;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType DrumKit = 8;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType FlightStick = 4;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType Gamepad = 1;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType Guitar = 6;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType GuitarAlternate = 7;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType GuitarBass = 11;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType Unknown = 0;
            public int value__;
            public const UnityEngine.InputSystem.XInput.XInputController.DeviceSubType Wheel = 2;
        }
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(hideInUI = true, stateType = typeof(UnityEngine.InputSystem.XInput.LowLevel.XInputControllerWindowsState))] [UnityEngine.Scripting.Preserve] public class XInputControllerWindows : UnityEngine.InputSystem.XInput.XInputController
    {
        public XInputControllerWindows() {}
    }
}

namespace UnityEngine.InputSystem.XR
{
    public struct Bone
    {
        public System.UInt32 parentBoneIndex { get; set; }
        public UnityEngine.Vector3 position { get; set; }
        public UnityEngine.Quaternion rotation { get; set; }
    }

    [UnityEngine.Scripting.Preserve] public class BoneControl : UnityEngine.InputSystem.InputControl<UnityEngine.InputSystem.XR.Bone>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"parentBoneIndex", offset = 0)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.IntegerControl parentBoneIndex { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Position", offset = 4)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control position { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"Rotation", offset = 16)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl rotation { get; }
        public BoneControl() {}
        protected virtual void FinishSetup();
        public virtual UnityEngine.InputSystem.XR.Bone ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(UnityEngine.InputSystem.XR.Bone value, void* statePtr);
    }

    public struct Eyes
    {
        public UnityEngine.Vector3 fixationPoint { get; set; }
        public float leftEyeOpenAmount { get; set; }
        public UnityEngine.Vector3 leftEyePosition { get; set; }
        public UnityEngine.Quaternion leftEyeRotation { get; set; }
        public float rightEyeOpenAmount { get; set; }
        public UnityEngine.Vector3 rightEyePosition { get; set; }
        public UnityEngine.Quaternion rightEyeRotation { get; set; }
    }

    [UnityEngine.Scripting.Preserve] public class EyesControl : UnityEngine.InputSystem.InputControl<UnityEngine.InputSystem.XR.Eyes>
    {
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"FixationPoint", offset = 56)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control fixationPoint { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"LeftEyeOpenAmount", offset = 68)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl leftEyeOpenAmount { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"LeftEyePosition", offset = 0)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"LeftEyeRotation", offset = 12)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl leftEyeRotation { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"RightEyeOpenAmount", offset = 72)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl rightEyeOpenAmount { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"RightEyePosition", offset = 28)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(displayName = @"RightEyeRotation", offset = 40)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl rightEyeRotation { get; }
        public EyesControl() {}
        protected virtual void FinishSetup();
        public virtual UnityEngine.InputSystem.XR.Eyes ReadUnprocessedValueFromState(void* statePtr);
        public virtual void WriteValueIntoState(UnityEngine.InputSystem.XR.Eyes value, void* statePtr);
    }

    public enum FeatureType
    {
        public const UnityEngine.InputSystem.XR.FeatureType Axis1D = 3;
        public const UnityEngine.InputSystem.XR.FeatureType Axis2D = 4;
        public const UnityEngine.InputSystem.XR.FeatureType Axis3D = 5;
        public const UnityEngine.InputSystem.XR.FeatureType Binary = 1;
        public const UnityEngine.InputSystem.XR.FeatureType Bone = 8;
        public const UnityEngine.InputSystem.XR.FeatureType Custom = 0;
        public const UnityEngine.InputSystem.XR.FeatureType DiscreteStates = 2;
        public const UnityEngine.InputSystem.XR.FeatureType Eyes = 9;
        public const UnityEngine.InputSystem.XR.FeatureType Hand = 7;
        public const UnityEngine.InputSystem.XR.FeatureType Rotation = 6;
        public int value__;
    }

    [UnityEngine.AddComponentMenu(@"XR/Tracked Pose Driver (New Input System)")] public class TrackedPoseDriver : UnityEngine.MonoBehaviour
    {
        public UnityEngine.InputSystem.InputAction positionAction { get; set; }
        public UnityEngine.InputSystem.InputAction rotationAction { get; set; }
        public UnityEngine.InputSystem.XR.TrackedPoseDriver.TrackingType trackingType { get; set; }
        public UnityEngine.InputSystem.XR.TrackedPoseDriver.UpdateType updateType { get; set; }
        public TrackedPoseDriver() {}
        protected virtual void Awake();
        protected virtual void OnBeforeRender();
        protected virtual void OnDestroy();
        protected void OnEnable();
        protected virtual void OnUpdate();
        protected virtual void PerformUpdate();
        protected virtual void SetLocalTransform(UnityEngine.Vector3 newPosition, UnityEngine.Quaternion newRotation);
        protected void UpdateCallback();
        public enum TrackingType
        {
            public const UnityEngine.InputSystem.XR.TrackedPoseDriver.TrackingType PositionOnly = 2;
            public const UnityEngine.InputSystem.XR.TrackedPoseDriver.TrackingType RotationAndPosition = 0;
            public const UnityEngine.InputSystem.XR.TrackedPoseDriver.TrackingType RotationOnly = 1;
            public int value__;
        }
        public enum UpdateType
        {
            public const UnityEngine.InputSystem.XR.TrackedPoseDriver.UpdateType BeforeRender = 2;
            public const UnityEngine.InputSystem.XR.TrackedPoseDriver.UpdateType Update = 1;
            public const UnityEngine.InputSystem.XR.TrackedPoseDriver.UpdateType UpdateAndBeforeRender = 0;
            public int value__;
        }
    }

    public struct UsageHint
    {
        public string content;
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"XR Controller", isGenericTypeOfDevice = true)] [UnityEngine.Scripting.Preserve] public class XRController : UnityEngine.InputSystem.TrackedDevice
    {
        public static UnityEngine.InputSystem.XR.XRController leftHand { get; }
        public static UnityEngine.InputSystem.XR.XRController rightHand { get; }
        public XRController() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.Scripting.Preserve] public class XRControllerWithRumble : UnityEngine.InputSystem.XR.XRController
    {
        public XRControllerWithRumble() {}
        public void SendImpulse(float amplitude, float duration);
    }

    public class XRDeviceDescriptor
    {
        public UnityEngine.XR.InputDeviceCharacteristics characteristics;
        public int deviceId;
        public string deviceName;
        public System.Collections.Generic.List<UnityEngine.InputSystem.XR.XRFeatureDescriptor> inputFeatures;
        public string manufacturer;
        public string serialNumber;
        public XRDeviceDescriptor() {}
        public static UnityEngine.InputSystem.XR.XRDeviceDescriptor FromJson(string json);
        public string ToJson();
    }

    public struct XRFeatureDescriptor
    {
        public System.UInt32 customSize;
        public UnityEngine.InputSystem.XR.FeatureType featureType;
        public string name;
        public System.Collections.Generic.List<UnityEngine.InputSystem.XR.UsageHint> usageHints;
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"XR HMD", isGenericTypeOfDevice = true)] [UnityEngine.Scripting.Preserve] public class XRHMD : UnityEngine.InputSystem.TrackedDevice
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control centerEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl centerEyeRotation { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control leftEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl leftEyeRotation { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control rightEyePosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl rightEyeRotation { get; }
        public XRHMD() {}
        protected virtual void FinishSetup();
    }

    public static class XRUtilities
    {
        public const string InterfaceCurrent = XRInputV1;
        public const string InterfaceMatchAnyVersion = ^(XRInput);
        public const string InterfaceV1 = XRInput;
    }
}

namespace UnityEngine.InputSystem.XR.Haptics
{
    public struct BufferedRumble
    {
        public UnityEngine.InputSystem.XR.Haptics.HapticCapabilities capabilities { get; }
        public BufferedRumble(UnityEngine.InputSystem.InputDevice device) {}
        public void EnqueueRumble(byte[] samples);
    }

    public struct GetCurrentHapticStateCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public System.UInt32 samplesAvailable;
        public System.UInt32 samplesQueued;
        public UnityEngine.InputSystem.XR.Haptics.HapticState currentState { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.XR.Haptics.GetCurrentHapticStateCommand Create();
    }

    public struct GetHapticCapabilitiesCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public System.UInt32 frequencyHz;
        public System.UInt32 maxBufferSize;
        public System.UInt32 numChannels;
        public UnityEngine.InputSystem.XR.Haptics.HapticCapabilities capabilities { get; }
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.XR.Haptics.GetHapticCapabilitiesCommand Create();
    }

    public struct HapticCapabilities
    {
        public System.UInt32 frequencyHz { get; }
        public System.UInt32 maxBufferSize { get; }
        public System.UInt32 numChannels { get; }
        public HapticCapabilities(System.UInt32 numChannels, System.UInt32 frequencyHz, System.UInt32 maxBufferSize) {}
    }

    public struct HapticState
    {
        public System.UInt32 samplesAvailable { get; }
        public System.UInt32 samplesQueued { get; }
        public HapticState(System.UInt32 samplesQueued, System.UInt32 samplesAvailable) {}
    }

    public struct SendBufferedHapticCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.XR.Haptics.SendBufferedHapticCommand Create(byte[] rumbleBuffer);
    }

    public struct SendHapticImpulseCommand : UnityEngine.InputSystem.LowLevel.IInputDeviceCommandInfo
    {
        public virtual UnityEngine.InputSystem.Utilities.FourCC typeStatic { get; }
        public static UnityEngine.InputSystem.XR.Haptics.SendHapticImpulseCommand Create(int motorChannel, float motorAmplitude, float motorDuration);
    }
}

namespace UnityEngine.XR.WindowsMR.Input
{
    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"HoloLens Hand")] [UnityEngine.Scripting.Preserve] public class HololensHand : UnityEngine.InputSystem.XR.XRController
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl airTap { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control sourceLossMitigationDirection { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl sourceLossRisk { get; }
        public HololensHand() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(displayName = @"Windows MR Headset")] [UnityEngine.Scripting.Preserve] public class WMRHMD : UnityEngine.InputSystem.XR.XRHMD
    {
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Quaternion", name = @"deviceRotation")] [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], layout = @"Vector3", name = @"devicePosition")] [UnityEngine.InputSystem.Layouts.InputControl] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl userPresence { get; }
        public WMRHMD() {}
        protected virtual void FinishSetup();
    }

    [UnityEngine.InputSystem.Layouts.InputControlLayout(commonUsages = Mono.Cecil.CustomAttributeArgument[], displayName = @"Windows MR Controller")] [UnityEngine.Scripting.Preserve] public class WMRSpatialController : UnityEngine.InputSystem.XR.XRControllerWithRumble
    {
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl batteryLevel { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceAngularVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control deviceVelocity { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl grip { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl gripPressed { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control joystick { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl joystickClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl menu { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control pointerPosition { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[], noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.QuaternionControl pointerRotation { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector3Control sourceLossMitigationDirection { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(noisy = true)] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl sourceLossRisk { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.Vector2Control touchpad { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadClicked { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl touchpadTouched { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.AxisControl trigger { get; }
        [UnityEngine.InputSystem.Layouts.InputControl(aliases = Mono.Cecil.CustomAttributeArgument[])] [UnityEngine.Scripting.Preserve] public UnityEngine.InputSystem.Controls.ButtonControl triggerPressed { get; }
        public WMRSpatialController() {}
        protected virtual void FinishSetup();
    }
}
